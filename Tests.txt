See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 95 warnings)

Correctness:  15/35 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 58.10%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.3K Jul 28 19:12 KdTree.java
3.9K Jul 28 19:12 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[lines 186-191]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'TSet$inOrderIterator' be refactored into a static nested class?  At KdTree.java:[lines 176-196]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:9: The private instance (or static) variable 'tree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:153: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
KdTree.java:196: Use the 'isEmpty()' method instead of comparing 'size()' to '0'. [UseCollectionIsEmpty]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:1:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] KdTree.java:8:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:27:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:36:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:45:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:51:6: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:53:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:59:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:63:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:72:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:76:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:82:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:85:12: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:100:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:100:41: '+=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:151:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:151:39: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:151:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:153:5: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:160:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:169:33: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:169:34: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:169:51: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:169:52: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:176:19: The class 'inOrderIterator' must start with an uppercase letter and use CamelCase. [TypeName]
[WARN] KdTree.java:176:62: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:176:63: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:188:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:189:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:204:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:205:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:205:15: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:209:51: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:211:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:221:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:222:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:224:13: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:224:14: 'else' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:227:9: '}' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 93 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:151:12: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:176:39: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1603)
    TestKdTree.main(TestKdTree.java:1935)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1604)
    TestKdTree.main(TestKdTree.java:1935)

  * 10000 random distinct points in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1605)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1606)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1607)
    TestKdTree.main(TestKdTree.java:1935)

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 3 of 5
    - student   size()    = 3
    - reference size()    = 2
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.0 1.0
      C  0.0 1.0

  * 10 random general points in a 4-by-4 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1615)
    TestKdTree.main(TestKdTree.java:1938)

  * 50 random general points in a 8-by-8 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1616)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1617)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1618)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1619)
    TestKdTree.main(TestKdTree.java:1938)

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt

    java.lang.NullPointerException

    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1627)
    TestKdTree.main(TestKdTree.java:1941)

  * input1.txt

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1628)
    TestKdTree.main(TestKdTree.java:1941)

  * input5.txt

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1629)
    TestKdTree.main(TestKdTree.java:1941)

  * input10.txt

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:251)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1630)
    TestKdTree.main(TestKdTree.java:1941)

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1638)
    TestKdTree.main(TestKdTree.java:1944)

  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1639)
    TestKdTree.main(TestKdTree.java:1944)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:251)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1640)
    TestKdTree.main(TestKdTree.java:1944)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:251)
    ...
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1641)
    TestKdTree.main(TestKdTree.java:1944)

  * 500 random non-degenerate points in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:251)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    ...
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1642)
    TestKdTree.main(TestKdTree.java:1944)

  * 10000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:251)
    ...
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1643)
    TestKdTree.main(TestKdTree.java:1944)

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1651)
    TestKdTree.main(TestKdTree.java:1947)

  * 10 random distinct points in a 4-by-4 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1652)
    TestKdTree.main(TestKdTree.java:1947)

  * 20 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1653)
    TestKdTree.main(TestKdTree.java:1947)

  * 10000 random distinct points in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1654)
    TestKdTree.main(TestKdTree.java:1947)

  * 100000 random distinct points in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1655)
    TestKdTree.main(TestKdTree.java:1947)

  * 100000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1656)
    TestKdTree.main(TestKdTree.java:1947)

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1664)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1665)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1666)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1667)
    TestKdTree.main(TestKdTree.java:1950)

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt

    java.lang.NullPointerException

    TSet$inOrderIterator.next(KdTree.java:188)
    TSet$inOrderIterator.next(KdTree.java:176)
    KdTree.range(KdTree.java:59)
    TestKdTree.checkRange(TestKdTree.java:576)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1675)
    TestKdTree.main(TestKdTree.java:1953)

  * input1.txt
  * input5.txt
  * input10.txt
==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1698)
    TestKdTree.main(TestKdTree.java:1959)

  * 10 random distinct points and random rectangles in a 4-by-4 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1699)
    TestKdTree.main(TestKdTree.java:1959)

  * 20 random distinct points and random rectangles in a 8-by-8 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1700)
    TestKdTree.main(TestKdTree.java:1959)

  * 100 random distinct points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1701)
    TestKdTree.main(TestKdTree.java:1959)

  * 1000 random distinct points and random rectangles in a 64-by-64 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1702)
    TestKdTree.main(TestKdTree.java:1959)

  * 10000 random distinct points and random rectangles in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1703)
    TestKdTree.main(TestKdTree.java:1959)

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1711)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TSet.add(KdTree.java:162)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1712)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:237)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1713)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1714)
    TestKdTree.main(TestKdTree.java:1962)

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1722)
    TestKdTree.main(TestKdTree.java:1965)

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1723)
    TestKdTree.main(TestKdTree.java:1965)

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1724)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1725)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1726)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1727)
    TestKdTree.main(TestKdTree.java:1965)

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - student range() returns correct set of points
    - student   range():  D 
    - reference range():  D 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.06, 0.47] x [0.66, 0.73]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student kd-tree nodes involved in calls to Point2D methods:
      A B E C D 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - failed on trial 1 of 1000

  * input10.txt
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.16, 0.68] x [0.06, 0.17]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student kd-tree nodes involved in calls to Point2D methods:
      A C B D F G H E J I 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C D B G J 
    - failed on trial 1 of 1000

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.5] x [0.75, 1.0]
    - sequence of points inserted: 
      A  1.0 0.5
      B  0.75 0.25
      C  0.25 0.0
    - student kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B 
    - failed on trial 1 of 1000

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.625] x [0.25, 0.375]
    - sequence of points inserted: 
      A  0.5 0.0
      B  1.0 0.5
      C  0.375 1.0
      D  0.875 0.875
      E  0.25 0.625
      F  0.125 0.125
    - student kd-tree nodes involved in calls to Point2D methods:
      A C B E D F 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C E F B 
    - failed on trial 4 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns correct set of points
    - student   range():  D F I 
    - reference range():  D F I 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.625, 0.875] x [0.0625, 0.875]
    - sequence of points inserted: 
      A  0.3125 0.3125
      B  0.125 0.5
      C  0.5 0.8125
      D  0.6875 0.625
      E  0.9375 0.75
      F  0.75 0.4375
      G  0.0625 0.5625
      H  0.4375 0.6875
      I  0.8125 0.25
      J  0.5625 1.0
    - student kd-tree nodes involved in calls to Point2D methods:
      A B C G D J H E F I 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C D H E F I J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.15625, 0.25] x [0.8125, 0.875]
    - sequence of points inserted: 
      A  0.09375 0.5
      B  0.46875 0.15625
      C  1.0 0.375
      D  0.75 0.3125
      E  0.40625 0.53125
      F  0.96875 0.4375
      G  0.28125 0.28125
      H  0.6875 0.78125
      I  0.8125 0.625
      J  0.125 0.71875
      K  0.0625 0.65625
      L  0.875 0.9375
      M  0.3125 0.09375
      N  0.625 0.0
      O  0.1875 0.96875
      P  0.71875 0.34375
      Q  0.5 1.0
      R  0.375 0.5625
      S  0.21875 0.59375
      T  0.34375 0.6875
    - student kd-tree nodes involved in calls to Point2D methods:
      A K B M C N D G E J F R O P H S Q I T L 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C D E J O 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns correct set of points
    - student   range():  S T R D 
    - reference range():  T R S D 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.015625, 0.796875] x [0.65625, 0.828125]
    - number of entries in student   solution: 30
    - number of entries in reference solution: 19
    - 11 extra entries in student solution, including:
      '(0.421875, 0.96875)'

    - failed on trial 1 of 1000

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1783)
    TestKdTree.main(TestKdTree.java:1980)

  * 15 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1784)
    TestKdTree.main(TestKdTree.java:1980)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1785)
    TestKdTree.main(TestKdTree.java:1980)

  * 100 random distinct points in a 32-by-32 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1786)
    TestKdTree.main(TestKdTree.java:1980)

  * 10000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1787)
    TestKdTree.main(TestKdTree.java:1980)

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1795)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1796)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1797)
    TestKdTree.main(TestKdTree.java:1983)

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.2, 0.3)
    - reference nearest() = (0.2, 0.3)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.07, 0.58)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E C D 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.083, 0.51)
    - reference nearest() = (0.083, 0.51)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.22, 0.4)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C B D F G H E J I 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D E B G H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.375, 0.75)
    - reference nearest() = (0.375, 0.75)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (1.0, 1.0)
    - sequence of points inserted: 
      A  0.375 0.75
      B  0.875 0.125
      C  0.0 0.625
      D  0.25 0.25
      E  0.125 0.375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C B D E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.5, 0.8125)
    - reference nearest() = (0.5, 0.8125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.4375, 1.0)
    - sequence of points inserted: 
      A  0.5 0.8125
      B  0.8125 0.375
      C  0.75 0.1875
      D  0.375 0.0625
      E  0.6875 0.4375
      F  0.3125 0.625
      G  0.0 0.25
      H  0.625 0.125
      I  0.1875 0.0
      J  0.875 0.3125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A D B I F C E G H J 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A D F G B E 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.625, 0.71875)
    - reference nearest() = (0.625, 0.71875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.5625, 0.65625)
    - sequence of points inserted: 
      A  0.15625 0.96875
      B  0.3125 0.3125
      C  0.65625 0.9375
      D  0.4375 0.28125
      E  1.0 0.75
      F  0.9375 0.375
      G  0.25 0.40625
      H  0.5 0.78125
      I  0.75 0.4375
      J  0.375 0.46875
      K  0.28125 0.0
      L  0.0 0.84375
      M  0.84375 0.59375
      N  0.09375 0.34375
      O  0.78125 0.09375
      P  0.6875 0.8125
      Q  0.53125 1.0
      R  0.03125 0.5625
      S  0.625 0.71875
      T  0.34375 0.125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A L B N D C R K O G E T H F P J Q I S M 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C G H Q S J 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.734375, 0.859375)
    - reference nearest() = (0.734375, 0.859375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 30
    - number of reference entries = 13
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.34375, 0.984375)
    - reference entry 1 = (0.875, 0.625)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.4296875, 0.4375)
    - reference nearest() = (0.4296875, 0.4375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 50
    - number of reference entries = 17
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.2890625, 0.15625)
    - reference entry 1 = (0.4765625, 0.8359375)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.9013671875, 0.74365234375)
    - reference nearest() = (0.9013671875, 0.74365234375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 1000
    - number of reference entries = 18
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.1083984375, 0.45751953125)
    - reference entry 1 = (0.38671875, 0.69775390625)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()

    java.lang.NullPointerException

    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:218)
    TestKdTree.test7(TestKdTree.java:1831)
    TestKdTree.main(TestKdTree.java:1992)

  * nearest()
  * range()

    java.lang.NullPointerException

    TSet$inOrderIterator.next(KdTree.java:188)
    TSet$inOrderIterator.next(KdTree.java:176)
    KdTree.range(KdTree.java:59)
    TestKdTree.checkRange(TestKdTree.java:576)
    TestKdTree.checkRange(TestKdTree.java:518)
    TestKdTree.test7(TestKdTree.java:1833)
    TestKdTree.main(TestKdTree.java:1992)

==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkAll(TestKdTree.java:880)
    TestKdTree.test9b(TestKdTree.java:1866)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.0, 0.0)
           st.size()  ==>  1
           st.nearest((1.0, 0.0))   ==>  (0.0, 0.0)
           st.contains((0.0, 1.0))

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1867)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(1.0, 0.625)
           st.nearest((0.5, 0.5625))   ==>  (1.0, 0.625)
           st.insert(0.9375, 0.125)
           st.contains((0.5625, 1.0))  ==>  false
           st.insert(0.5, 0.0625)
           st.nearest((0.0, 0.0625))   ==>  (0.5, 0.0625)
           st.range([0.25, 0.75] x [0.0625, 0.25])  ==>  T 
           st.nearest((0.875, 0.375))   ==>  (0.9375, 0.125)
           st.contains((0.0, 0.4375))  ==>  false
           st.contains((0.9375, 0.25))  ==>  false
           st.isEmpty()  ==>  false
           st.insert(0.3125, 0.5625)
           st.contains((0.75, 0.75))  ==>  false
           st.nearest((0.4375, 0.6875))   ==>  (0.3125, 0.5625)
           st.contains((0.0625, 0.4375))  ==>  false
           st.insert(0.0, 0.75)
           st.size()  ==>  5
           st.insert(0.3125, 0.375)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:251)
    ...
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkAll(TestKdTree.java:880)
    TestKdTree.test9b(TestKdTree.java:1868)
    TestKdTree.main(TestKdTree.java:2001)


  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1869)
    TestKdTree.main(TestKdTree.java:2001)


  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1870)
    TestKdTree.main(TestKdTree.java:2001)


  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1871)
    TestKdTree.main(TestKdTree.java:2001)


==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 51 of 20000
    - student   size() = 12
    - reference size() = 4

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:251)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    ...
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkAll(TestKdTree.java:880)
    TestKdTree.test9c(TestKdTree.java:1881)
    TestKdTree.main(TestKdTree.java:2004)


  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:231)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1882)
    TestKdTree.main(TestKdTree.java:2004)


  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1883)
    TestKdTree.main(TestKdTree.java:2004)


  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.add(KdTree.java:237)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:225)
    TreeNode.add(KdTree.java:231)
    TreeNode.add(KdTree.java:225)
    ...
    TSet.add(KdTree.java:162)
    KdTree.insert(KdTree.java:31)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1884)
    TestKdTree.main(TestKdTree.java:2004)


  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    TreeNode.contains(KdTree.java:261)
    TreeNode.contains(KdTree.java:251)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    TreeNode.contains(KdTree.java:257)
    ...
    TSet.contains(KdTree.java:166)
    KdTree.contains(KdTree.java:40)
    TestKdTree.checkAll(TestKdTree.java:880)
    TestKdTree.test9c(TestKdTree.java:1885)
    TestKdTree.main(TestKdTree.java:2004)


==> FAILED

Test 10: insert n random points into two different KdTree obje

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.