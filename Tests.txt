See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 149 warnings)

Correctness:  33/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 92.76%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 11K Jul 29 19:49 KdTree.java
3.9K Jul 29 19:49 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[lines 200-205]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'TSet$inOrderIterator' be refactored into a static nested class?  At KdTree.java:[lines 189-210]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:9: The private instance (or static) variable 'tree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:143: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
KdTree.java:210: Use the 'isEmpty()' method instead of comparing 'size()' to '0'. [UseCollectionIsEmpty]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:1:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] KdTree.java:8:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:27:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:31:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:37:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:46:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:52:6: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:54:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:62:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:66:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:77:10: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:80:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:80:41: '+=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:90:51: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:141:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:141:39: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:141:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:143:5: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:154:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:166:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:175:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:182:33: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:182:34: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:182:51: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:182:52: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:189:19: The class 'inOrderIterator' must start with an uppercase letter and use CamelCase. [TypeName]
[WARN] KdTree.java:189:62: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:189:63: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:194:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:202:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:203:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:218:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:219:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:219:15: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:223:51: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:225:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:235:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:235:26: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:235:29: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
...
Checkstyle ends with 0 errors and 147 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:141:12: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:189:39: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.11, 0.93)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - failed on trial 5 of 1000

  * input10.txt
    - student   nearest() = (0.499, 0.208)
    - reference nearest() = (0.499, 0.208)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.47, 0.16)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J C D E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.5625, 0.8125)
    - reference nearest() = (0.5625, 0.8125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.625, 0.6875)
    - sequence of points inserted: 
      A  0.4375 0.25
      B  1.0 0.375
      C  0.25 0.9375
      D  0.3125 0.5625
      E  0.1875 0.625
      F  0.9375 0.3125
      G  0.875 0.4375
      H  0.0 0.0625
      I  0.5625 0.8125
      J  0.5 0.0
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G I F J C D E H 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G I 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.75, 0.1875)
    - reference nearest() = (0.75, 0.1875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.6875, 0.21875)
    - sequence of points inserted: 
      A  0.125 0.625
      B  0.28125 0.96875
      C  0.34375 0.09375
      D  0.25 0.125
      E  0.9375 0.3125
      F  0.09375 0.875
      G  0.1875 0.375
      H  0.78125 0.15625
      I  0.8125 0.65625
      J  0.90625 0.59375
      K  0.46875 0.78125
      L  0.59375 0.75
      M  0.84375 0.71875
      N  0.21875 0.0625
      O  0.375 0.5625
      P  0.40625 0.03125
      Q  0.4375 0.4375
      R  0.75 0.1875
      S  0.5625 0.5
      T  0.03125 0.25
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E H P R D G N F T 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E H P R 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.984375, 0.140625)
    - reference nearest() = (0.984375, 0.140625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 14
    - number of reference entries = 5
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.71875, 0.671875)
    - reference nearest() = (0.71875, 0.671875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 49
    - number of reference entries = 13
    - entry 8 of the two sequences are not equal
    - student   entry 8 = (0.984375, 0.2734375)
    - reference entry 8 = (0.6875, 0.7578125)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.4501953125, 0.95263671875)
    - reference nearest() = (0.4501953125, 0.95263671875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 605
    - number of reference entries = 10
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 25/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          248                264
=> passed        2          344                360
=> passed        5          632                648
=> passed       10         1112               1128
=> passed       25         2552               2568
=> passed      100         9752               9768
=> passed      400        38552              38568
=> passed      800        76952              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 152.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          144                160
=> passed        2          224                288
=> passed        5          464                672
=> passed       10          864               1312
=> passed       25         2064               3232
=> passed      100         8064              12832
=> passed      400        32064              51232
=> passed      800        64064             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 80.00 n + 64.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1208523         
=> passed   320000    1586137         
=> passed   640000    1420901         
=> passed  1280000    1168009         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1187173         
=> passed   320000     979588         
=> passed   640000     813965         
=> passed  1280000     727166         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4050         
=> passed    20000       1441         
=> passed    40000        687         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5096         
=> passed    20000       1772         
=> passed    40000        776         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1757034               0.0              22.1              21.1              21.6         
=> passed   320000    1638700               0.0              22.5              21.5              22.0         
=> passed   640000    1202451               0.0              24.0              23.0              23.5         
=> passed  1280000    1022179               0.0              26.1              25.1              25.6         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1208714              18.5              17.5              18.0         
=> passed    20000    1201627              19.7              18.7              19.2         
=> passed    40000    1055267              21.8              20.8              21.3         
=> passed    80000     921494              22.0              21.0              21.5         
=> passed   160000     780169              23.2              22.2              22.7         
=> passed   320000     848731              25.0              24.0              24.5         
=> passed   640000     552054              25.7              24.7              25.2         
=> passed  1280000     492150              27.2              26.2              26.7         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     317573               0.0               0.0              56.5              55.2         
=> passed    20000     312747               0.0               0.0              58.6              58.2         
=> passed    40000     316503               0.0               0.0              71.9              70.6         
=> passed    80000     247859               0.0               0.0              74.3              73.1         
=> passed   160000     192236               0.0               0.0              77.1              77.0         
=> passed   320000     240369               0.0               0.0              73.7              72.8         
=> passed   640000     151299               0.0               0.0              78.9              78.7         
=> passed  1280000     135957               0.0               0.0              86.8              85.0         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> FAILED    10000     3239   (0.1x)          0.0                    0.0                 21368.0  (26.7x)  21396.2  (26.7x)
=> FAILED    20000     1394   (0.0x)          0.0                    0.0                 41737.0  (52.2x)  41665.9  (52.1x)
=> FAILED    40000      599   (0.0x)          0.0                    0.0                 84677.0 (105.8x)  84672.7 (105.8x)
=> FAILED    80000      299   (0.0x)          0.0                    0.0                165916.3 (207.4x) 165892.2 (207.4x)
=> FAILED   160000      124   (0.0x)          0.0                    0.0                313332.5 (391.7x) 313101.6 (391.4x)
=> FAILED   320000       30   (0.0x)          0.0                    0.0                638341.4 (797.9x) 638574.5 (798.2x)
=> FAILED   640000       13   (0.0x)          0.0                    0.0               1441161.9 (2e+03x) 1441104.9 (2e+03x)
=> FAILED  1280000        7   (0.0x)          0.0                    0.0               2678220.0 (3e+03x) 2678020.8 (3e+03x)
==> 0/8 tests passed



Total: 20/28 tests passed!


================================================================



