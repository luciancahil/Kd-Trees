See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (4 warnings)
Checkstyle:   FAILED (0 errors, 94 warnings)

Correctness:  8/35 tests passed
Memory:       8/16 tests passed
Timing:       14/42 tests passed

Aggregate score: 35.38%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.0K Jul 28 18:36 KdTree.java
3.9K Jul 28 18:36 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'contains()' but ignores its return value. The method, however, does not produce any effect other than returning a value.  At KdTree.java:[line 223]
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[lines 166-171]
M C UWF_UNWRITTEN_FIELD UwF: The instance (or static) variable 'tree' is never initialized; all reads of it will return the default value (0 or null). Check for errors (should it have been initialized?), or remove if useless.  At KdTree.java:[line 29]
M C UWF_UNWRITTEN_FIELD UwF: The instance (or static) variable 'root' is never initialized; all reads of it will return the default value (0 or null). Check for errors (should it have been initialized?), or remove if useless.  At KdTree.java:[line 161]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'TSet$inOrderIterator' be refactored into a static nested class?  At KdTree.java:[lines 156-176]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 29]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 39]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'root', which appears to be null.  At KdTree.java:[line 146]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'root', which appears to be null.  At KdTree.java:[line 142]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 58]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'root', which appears to be null.  At KdTree.java:[line 149]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 44]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 78]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:8: The private instance (or static) variable 'size' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:135: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
KdTree.java:176: Use the 'isEmpty()' method instead of comparing 'size()' to '0'. [UseCollectionIsEmpty]
KdTree.java:226: The 'if' or 'else' clause appears to serve no purpose because its body is empty. [EmptyIfStmt]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:1:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] KdTree.java:8:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:26:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:29:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:35:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:44:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:50:6: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:52:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:58:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:62:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:71:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:75:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:81:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:84:12: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:97:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:97:41: '+=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:133:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:133:39: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:133:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:135:5: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:149:33: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:149:34: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:149:51: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:149:52: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:156:19: The class 'inOrderIterator' must start with an uppercase letter and use CamelCase. [TypeName]
[WARN] KdTree.java:156:62: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:156:63: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:168:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:169:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:184:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:185:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:185:15: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:189:51: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:191:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:199:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:200:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:202:13: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:202:14: 'else' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:205:9: '}' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 92 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:133:12: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:156:39: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1581)
    TestKdTree.main(TestKdTree.java:1929)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1582)
    TestKdTree.main(TestKdTree.java:1929)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1583)
    TestKdTree.main(TestKdTree.java:1929)

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1590)
    TestKdTree.main(TestKdTree.java:1932)

  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1591)
    TestKdTree.main(TestKdTree.java:1932)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1592)
    TestKdTree.main(TestKdTree.java:1932)

  * 50 random non-degenerate points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1593)
    TestKdTree.main(TestKdTree.java:1932)

  * 500 random non-degenerate points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1594)
    TestKdTree.main(TestKdTree.java:1932)

  * 50000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1595)
    TestKdTree.main(TestKdTree.java:1932)

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1602)
    TestKdTree.main(TestKdTree.java:1935)

  * 10 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1603)
    TestKdTree.main(TestKdTree.java:1935)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1604)
    TestKdTree.main(TestKdTree.java:1935)

  * 10000 random distinct points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1605)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1606)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1607)
    TestKdTree.main(TestKdTree.java:1935)

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1614)
    TestKdTree.main(TestKdTree.java:1938)

  * 10 random general points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1615)
    TestKdTree.main(TestKdTree.java:1938)

  * 50 random general points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1616)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1617)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1618)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1619)
    TestKdTree.main(TestKdTree.java:1938)

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree.contains(KdTree.java:39)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1627)
    TestKdTree.main(TestKdTree.java:1941)

  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1628)
    TestKdTree.main(TestKdTree.java:1941)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1629)
    TestKdTree.main(TestKdTree.java:1941)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1630)
    TestKdTree.main(TestKdTree.java:1941)

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1638)
    TestKdTree.main(TestKdTree.java:1944)

  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1639)
    TestKdTree.main(TestKdTree.java:1944)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1640)
    TestKdTree.main(TestKdTree.java:1944)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1641)
    TestKdTree.main(TestKdTree.java:1944)

  * 500 random non-degenerate points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1642)
    TestKdTree.main(TestKdTree.java:1944)

  * 10000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1643)
    TestKdTree.main(TestKdTree.java:1944)

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1651)
    TestKdTree.main(TestKdTree.java:1947)

  * 10 random distinct points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1652)
    TestKdTree.main(TestKdTree.java:1947)

  * 20 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1653)
    TestKdTree.main(TestKdTree.java:1947)

  * 10000 random distinct points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1654)
    TestKdTree.main(TestKdTree.java:1947)

  * 100000 random distinct points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1655)
    TestKdTree.main(TestKdTree.java:1947)

  * 100000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1656)
    TestKdTree.main(TestKdTree.java:1947)

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1664)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1665)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1666)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1667)
    TestKdTree.main(TestKdTree.java:1950)

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt

    java.lang.NullPointerException

    KdTree.range(KdTree.java:58)
    TestKdTree.checkRange(TestKdTree.java:576)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1675)
    TestKdTree.main(TestKdTree.java:1953)

  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1676)
    TestKdTree.main(TestKdTree.java:1953)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1677)
    TestKdTree.main(TestKdTree.java:1953)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1678)
    TestKdTree.main(TestKdTree.java:1953)

==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1686)
    TestKdTree.main(TestKdTree.java:1956)

  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1687)
    TestKdTree.main(TestKdTree.java:1956)

  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1688)
    TestKdTree.main(TestKdTree.java:1956)

  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1689)
    TestKdTree.main(TestKdTree.java:1956)

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1690)
    TestKdTree.main(TestKdTree.java:1956)

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1691)
    TestKdTree.main(TestKdTree.java:1956)

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1698)
    TestKdTree.main(TestKdTree.java:1959)

  * 10 random distinct points and random rectangles in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1699)
    TestKdTree.main(TestKdTree.java:1959)

  * 20 random distinct points and random rectangles in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1700)
    TestKdTree.main(TestKdTree.java:1959)

  * 100 random distinct points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1701)
    TestKdTree.main(TestKdTree.java:1959)

  * 1000 random distinct points and random rectangles in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1702)
    TestKdTree.main(TestKdTree.java:1959)

  * 10000 random distinct points and random rectangles in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1703)
    TestKdTree.main(TestKdTree.java:1959)

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1711)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1712)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1713)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1714)
    TestKdTree.main(TestKdTree.java:1962)

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1722)
    TestKdTree.main(TestKdTree.java:1965)

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1723)
    TestKdTree.main(TestKdTree.java:1965)

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1724)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1725)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1726)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1727)
    TestKdTree.main(TestKdTree.java:1965)

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:660)
    TestKdTree.test4a(TestKdTree.java:1736)
    TestKdTree.main(TestKdTree.java:1968)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:660)
    TestKdTree.test4a(TestKdTree.java:1737)
    TestKdTree.main(TestKdTree.java:1968)

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1747)
    TestKdTree.main(TestKdTree.java:1971)

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1748)
    TestKdTree.main(TestKdTree.java:1971)

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1749)
    TestKdTree.main(TestKdTree.java:1971)

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1750)
    TestKdTree.main(TestKdTree.java:1971)

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1751)
    TestKdTree.main(TestKdTree.java:1971)

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1760)
    TestKdTree.main(TestKdTree.java:1974)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1761)
    TestKdTree.main(TestKdTree.java:1974)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1762)
    TestKdTree.main(TestKdTree.java:1974)

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1771)
    TestKdTree.main(TestKdTree.java:1977)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1772)
    TestKdTree.main(TestKdTree.java:1977)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1773)
    TestKdTree.main(TestKdTree.java:1977)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1774)
    TestKdTree.main(TestKdTree.java:1977)

  * 10000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1775)
    TestKdTree.main(TestKdTree.java:1977)

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1783)
    TestKdTree.main(TestKdTree.java:1980)

  * 15 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1784)
    TestKdTree.main(TestKdTree.java:1980)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1785)
    TestKdTree.main(TestKdTree.java:1980)

  * 100 random distinct points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1786)
    TestKdTree.main(TestKdTree.java:1980)

  * 10000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1787)
    TestKdTree.main(TestKdTree.java:1980)

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1795)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1796)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1797)
    TestKdTree.main(TestKdTree.java:1983)

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:361)
    TestKdTree.test6a(TestKdTree.java:1806)
    TestKdTree.main(TestKdTree.java:1986)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:361)
    TestKdTree.test6a(TestKdTree.java:1807)
    TestKdTree.main(TestKdTree.java:1986)

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1817)
    TestKdTree.main(TestKdTree.java:1989)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1818)
    TestKdTree.main(TestKdTree.java:1989)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1819)
    TestKdTree.main(TestKdTree.java:1989)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1820)
    TestKdTree.main(TestKdTree.java:1989)

  * 50 random non-degenerate points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1821)
    TestKdTree.main(TestKdTree.java:1989)

  * 1000 random non-degenerate points in a 2048-by-2048 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1822)
    TestKdTree.main(TestKdTree.java:1989)

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()

    java.lang.NullPointerException

    KdTree.contains(KdTree.java:39)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:218)
    TestKdTree.test7(TestKdTree.java:1831)
    TestKdTree.main(TestKdTree.java:1992)

  * nearest()
  * range()

    java.lang.NullPointerException

    KdTree.range(KdTree.java:58)
    TestKdTree.checkRange(TestKdTree.java:576)
    TestKdTree.checkRange(TestKdTree.java:518)
    TestKdTree.test7(TestKdTree.java:1833)
    TestKdTree.main(TestKdTree.java:1992)

==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNullInsert(TestKdTree.java:1549)
    TestKdTree.test8(TestKdTree.java:1840)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

  * argument to contains() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNullContains(TestKdTree.java:1444)
    TestKdTree.test8(TestKdTree.java:1841)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

  * argument to range() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNullRange(TestKdTree.java:1479)
    TestKdTree.test8(TestKdTree.java:1842)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

  * argument to nearest() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkNullNearest(TestKdTree.java:1514)
    TestKdTree.test8(TestKdTree.java:1843)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1852)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(1.0, 0.0)

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1853)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.6875, 0.0625)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1854)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.4453125, 0.9765625)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1855)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.6767578125, 0.333984375)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1856)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.213134765625, 0.094482421875)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1857)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.675445556640625, 0.94403076171875)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1866)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(1.0, 0.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1867)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.125, 0.0625)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1868)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.359375, 0.546875)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1869)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.6806640625, 0.982421875)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1870)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.00390625, 0.42822265625)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1871)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.3441162109375, 0.191741943359375)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1880)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(0.0, 1.0)

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1881)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.625, 0.75)

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1882)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.1015625, 0.71875)

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1883)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.4560546875, 0.0908203125)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1884)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.451416015625, 0.2977294921875)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9c(TestKdTree.java:1885)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.566925048828125, 0.0121612548828125)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1187)
    TestKdTree.test10(TestKdTree.java:1896)
    TestKdTree.main(TestKdTree.java:2007)

    - sequence of operations was:
           KdTree st1 = new KdTree();
           st1.insert((0.75, 0.25))
  * 20 random general points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1187)
    TestKdTree.test10(TestKdTree.java:1897)
    TestKdTree.main(TestKdTree.java:2007)

    - sequence of operations was:
           KdTree st1 = new KdTree();
           st1.insert((0.875, 0.25))
  * 100 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1187)
    TestKdTree.test10(TestKdTree.java:1898)
    TestKdTree.main(TestKdTree.java:2007)

    - sequence of operations was:
           KdTree st1 = new KdTree();
           st1.insert((0.5390625, 0.7578125))
  * 1000 random general points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:29)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1187)
    TestKdTree.test10(TestKdTree.java:1899)
    TestKdTree.main(TestKdTree.java:2007)

    - sequence of operations was:
           KdTree st1 = new KdTree();
           st1.insert((0.1888580322265625, 0.0636749267578125))
==> FAILED


Total: 0/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          248                264
=> passed        2          344                360
=> passed        5          632                648
=> passed       10         1112               1128
=> passed       25         2552               2568
=> passed      100         9752               9768
=> passed      400        38552              38568
=> p

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.