See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 139 warnings)

Correctness:  26/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 80.76%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.5K Jul 29 03:19 KdTree.java
3.9K Jul 29 03:19 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[lines 198-203]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'TSet$inOrderIterator' be refactored into a static nested class?  At KdTree.java:[lines 187-208]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:9: The private instance (or static) variable 'tree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:141: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
KdTree.java:208: Use the 'isEmpty()' method instead of comparing 'size()' to '0'. [UseCollectionIsEmpty]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:1:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] KdTree.java:8:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:27:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:31:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:37:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:46:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:52:6: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:54:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:62:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:66:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:82:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:82:41: '+=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:139:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:139:39: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:139:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:141:5: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:152:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:164:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:173:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:180:33: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:180:34: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:180:51: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:180:52: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:187:19: The class 'inOrderIterator' must start with an uppercase letter and use CamelCase. [TypeName]
[WARN] KdTree.java:187:62: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:187:63: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:192:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:200:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:201:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:216:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:217:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:217:15: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:221:51: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:223:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:233:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:233:31: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:234:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:238:17: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:238:47: '{' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 137 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:139:12: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:187:39: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 3 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.699, 0.773)
    - student   nearest()           = (0.4, 0.7)
    - reference nearest()           = (0.9, 0.6)
    - student   distanceSquaredTo() = 0.09473
    - reference distanceSquaredTo() = 0.07033

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.019, 0.668)
    - student   nearest()           = (0.226, 0.577)
    - reference nearest()           = (0.083, 0.51)
    - student   distanceSquaredTo() = 0.05113
    - reference distanceSquaredTo() = 0.02906

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 8 of 10000
    - sequence of points inserted: 
      A  0.9375 0.125
      B  0.53125 0.0625
      C  0.84375 0.71875
      D  0.34375 0.28125
      E  0.875 0.625
      F  0.0 0.96875
      G  0.3125 0.78125
      H  0.375 0.40625
      I  0.40625 0.8125
      J  0.8125 0.09375
      K  0.0625 0.75
      L  0.625 0.0
      M  0.75 0.84375
      N  0.15625 0.59375
      O  0.1875 1.0
      P  0.09375 0.6875
      Q  0.4375 0.65625
      R  0.59375 0.3125
      S  0.6875 0.46875
      T  0.96875 0.53125
    - query point                   = (1.0, 0.875)
    - student   nearest()           = (0.96875, 0.53125)
    - reference nearest()           = (0.84375, 0.71875)
    - student   distanceSquaredTo() = 0.119140625
    - reference distanceSquaredTo() = 0.048828125

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 2 of 10000
    - query point                   = (0.765625, 0.234375)
    - student   nearest()           = (0.78125, 0.125)
    - reference nearest()           = (0.828125, 0.15625)
    - student   distanceSquaredTo() = 0.01220703125
    - reference distanceSquaredTo() = 0.010009765625

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 2 of 10000
    - query point                   = (0.1697235107421875, 0.22332763671875)
    - student   nearest()           = (0.1663818359375, 0.2123870849609375)
    - reference nearest()           = (0.176544189453125, 0.2288360595703125)
    - student   distanceSquaredTo() = 0.000130862463266
    - reference distanceSquaredTo() = 0.000076864380389

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 17 of 10000
    - sequence of points inserted: 
      A  0.75 0.25
      B  1.0 0.5
      C  0.5 0.25
      D  1.0 0.75
      E  0.75 0.5
      F  0.5 0.0
      G  1.0 0.0
      H  0.75 0.0
      I  0.0 0.75
      J  0.0 0.5
    - query point                   = (0.75, 1.0)
    - student   nearest()           = (0.75, 0.25)
    - reference nearest()           = (1.0, 0.75)
    - student   distanceSquaredTo() = 0.5625
    - reference distanceSquaredTo() = 0.125

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.875 0.5
      B  0.25 0.25
      C  0.25 0.625
      D  0.375 0.5
      E  0.0 0.25
      F  0.375 0.625
      G  0.625 0.125
      H  0.375 0.0
      I  0.625 1.0
      J  1.0 0.875
      K  0.875 0.875
      L  0.125 0.25
      M  0.0 0.875
      N  0.875 0.0
      O  0.375 0.875
    - query point                   = (0.25, 1.0)
    - student   nearest()           = (0.25, 0.625)
    - reference nearest()           = (0.375, 0.875)
    - student   distanceSquaredTo() = 0.140625
    - reference distanceSquaredTo() = 0.03125

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 17 of 10000
    - sequence of points inserted: 
      A  0.375 0.25
      B  0.9375 0.375
      C  0.125 0.9375
      D  0.875 0.1875
      E  0.75 0.6875
      F  0.5 0.0625
      G  0.5 0.125
      H  0.25 0.1875
      I  0.1875 0.4375
      J  1.0 0.875
      K  0.0 0.25
      L  0.0625 0.25
      M  0.625 0.3125
      N  0.0 1.0
      O  1.0 0.25
      P  0.875 0.25
      Q  0.1875 0.25
      R  0.6875 0.8125
      S  0.8125 0.1875
      T  0.625 0.0
    - query point                   = (0.3125, 0.5)
    - student   nearest()           = (0.375, 0.25)
    - reference nearest()           = (0.1875, 0.4375)
    - student   distanceSquaredTo() = 0.06640625
    - reference distanceSquaredTo() = 0.01953125

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 5 of 10000
    - query point                   = (1.0, 0.125)
    - student   nearest()           = (0.96875, 0.03125)
    - reference nearest()           = (1.0, 0.21875)
    - student   distanceSquaredTo() = 0.009765625
    - reference distanceSquaredTo() = 0.0087890625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 3 of 10000
    - query point                   = (0.0085296630859375, 0.230133056640625)
    - student   nearest()           = (0.01116943359375, 0.2122039794921875)
    - reference nearest()           = (0.00677490234375, 0.22991943359375)
    - student   distanceSquaredTo() = 0.000328420195729
    - reference distanceSquaredTo() = 0.000003124820068

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point                   = (0.25, 0.0625)
    - student   nearest()           = (0.25, 0.0)
    - reference nearest()           = (0.25, 0.0625)
    - student   distanceSquaredTo() = 0.00390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 3 of 10000
    - query point                   = (0.9375, 0.3125)
    - student   nearest()           = (0.9453125, 0.3046875)
    - reference nearest()           = (0.9453125, 0.3125)
    - student   distanceSquaredTo() = 0.0001220703125
    - reference distanceSquaredTo() = 0.00006103515625

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 3 of 10000
    - query point                   = (0.396484375, 0.1455078125)
    - student   nearest()           = (0.4033203125, 0.1474609375)
    - reference nearest()           = (0.3935546875, 0.142578125)
    - student   distanceSquaredTo() = 0.00005054473877
    - reference distanceSquaredTo() = 0.000017166137695

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.2, 0.3)
    - reference nearest() = (0.2, 0.3)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.09, 0.37)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.32, 0.708)
    - reference nearest() = (0.32, 0.708)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.08, 0.98)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C F D E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C F B H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.375, 0.0)
    - reference nearest() = (0.375, 0.0)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.625, 0.125)
    - sequence of points inserted: 
      A  0.75 0.5
      B  0.125 0.375
      C  0.875 0.25
      D  0.375 0.0
      E  0.0 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D E C 
    - failed on trial 2 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.875, 0.9375)
    - reference nearest() = (0.875, 0.9375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (1.0, 0.75)
    - sequence of points inserted: 
      A  0.125 0.3125
      B  0.3125 0.25
      C  0.5625 0.875
      D  0.0 0.1875
      E  0.6875 0.125
      F  0.0625 1.0
      G  0.375 0.5625
      H  0.1875 0.4375
      I  0.875 0.9375
      J  0.5 0.625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C I G J H E D F 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C I 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.40625, 0.59375)
    - reference nearest() = (0.40625, 0.59375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.5, 0.625)
    - sequence of points inserted: 
      A  0.9375 0.1875
      B  0.28125 0.71875
      C  0.875 0.75
      D  0.75 0.25
      E  0.46875 0.5
      F  0.6875 0.46875
      G  0.3125 0.53125
      H  0.53125 0.21875
      I  0.0 0.65625
      J  0.90625 0.8125
      K  0.125 0.125
      L  0.8125 0.28125
      M  0.625 0.03125
      N  0.71875 0.4375
      O  0.84375 0.96875
      P  0.09375 0.15625
      Q  0.0625 0.5625
      R  0.59375 0.09375
      S  0.40625 0.59375
      T  0.1875 0.78125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D E G S I Q F H 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D E G S C O T 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.140625, 0.703125)
    - reference nearest() = (0.140625, 0.703125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 8
    - number of reference entries = 5
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.53125, 0.8515625)
    - reference nearest() = (0.5234375, 0.90625)
    - student   distanceSquaredTo() = 0.01348876953125
    - reference distanceSquaredTo() = 0.00518798828125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 32
    - number of reference entries = 10
    - entry 9 of the two sequences are not equal
    - student   entry 9 = (0.265625, 0.6796875)
    - reference entry 9 = (0.5234375, 0.90625)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.4677734375, 0.5087890625)
    - reference nearest() = (0.4677734375, 0.5087890625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 274
    - number of reference entries = 20
    - entry 14 of the two sequences are not equal
    - student   entry 14 = (0.81103515625, 0.166015625)
    - reference entry 14 = (0.388671875, 0.29150390625)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 12 of 20000
    - student   nearest()  = (0.5625, 0.625)
    - reference nearest()  = (0.6875, 0.0625)
    - student   distanceSquaredTo() = 0.33203125
    - reference distanceSquaredTo() = 0.265625
    - sequence of operations was:
           st.insert(0.5625, 0.625)
           st.nearest((0.125, 0.0625))   ==>  (0.5625, 0.625)
           st.nearest((0.125, 0.1875))   ==>  (0.5625, 0.625)
           st.range([0.625, 0.8125] x [0.0, 0.125])  ==>  empty
           st.contains((0.75, 0.6875))  ==>  false
           st.range([0.0625, 1.0] x [0.25, 0.375])  ==>  empty
           st.nearest((0.75, 0.5625))   ==>  (0.5625, 0.625)
           st.insert(0.6875, 0.0625)
           st.insert(0.875, 0.875)
           st.contains((0.8125, 0.3125))  ==>  false
           st.nearest((1.0, 0.5625))   ==>  (0.875, 0.875)
           st.nearest((0.1875, 0.1875))   ==>  (0.5625, 0.625)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 48 of 20000
    - student   nearest()  = (0.8125, 0.625)
    - reference nearest()  = (0.9921875, 0.6796875)
    - student   distanceSquaredTo() = 0.02587890625
    - reference distanceSquaredTo() = 0.0020751953125

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 27 of 20000
    - student   nearest()  = (0.2626953125, 0.30078125)
    - reference nearest()  = (0.2275390625, 0.1025390625)
    - student   distanceSquaredTo() = 0.192905426025391
    - reference distanceSquaredTo() = 0.173489570617676

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 38 of 20000
    - student   nearest()  = (0.0609130859375, 0.291015625)
    - reference nearest()  = (0.333740234375, 0.7037353515625)
    - student   distanceSquaredTo() = 0.419700413942337
    - reference distanceSquaredTo() = 0.132195055484772

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.40008544921875, 0.933868408203125)
    - reference nearest()  = (0.411651611328125, 0.887298583984375)
    - student   distanceSquaredTo() = 0.003881759941578
    - reference distanceSquaredTo() = 0.000237883068621
    - sequence of operations was:
           st.insert(0.40008544921875, 0.933868408203125)
           st.nearest((0.8753662109375, 0.2281341552734375))   ==>  (0.40008544921875, 0.933868408203125)
           st.insert(0.82623291015625, 0.8759765625)
           st.range([0.258392333984375, 0.7807159423828125] x [0.56756591796875, 0.637420654296875])  ==>  empty
           st.nearest((0.028656005859375, 0.7535858154296875))   ==>  (0.40008544921875, 0.933868408203125)
           st.range([0.2221221923828125, 0.9055328369140625] x [0.2362213134765625, 0.6700439453125])  ==>  empty
           st.insert(0.0301513671875, 0.4801025390625)
           st.insert(0.411651611328125, 0.887298583984375)
           st.insert(0.957275390625, 0.659423828125)
           st.insert(0.3178863525390625, 0.7590484619140625)
           st.nearest((0.40869140625, 0.872161865234375))   ==>  (0.40008544921875, 0.933868408203125)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 16 of 20000
    - student   nearest()  = (0.1875, 0.25)
    - reference nearest()  = (0.625, 0.5625)
    - student   distanceSquaredTo() = 0.28515625
    - reference distanceSquaredTo() = 0.09765625
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.isEmpty()  ==>  true
           st.insert(0.625, 0.0625)
           st.nearest((0.375, 0.75))   ==>  (0.625, 0.0625)
           st.insert(0.625, 0.5625)
           st.contains((0.5, 0.75))  ==>  false
           st.insert(0.875, 0.9375)
           st.isEmpty()  ==>  false
           st.insert(0.1875, 0.25)
           st.nearest((0.0625, 0.25))   ==>  (0.1875, 0.25)
           st.isEmpty()  ==>  false
           st.nearest((0.1875, 0.6875))   ==>  (0.1875, 0.25)
           st.insert(0.0, 0.125)
           st.range([0.25, 0.8125] x [0.5625, 0.8125])  ==>  W 
           st.nearest((0.375, 0.75))   ==>  (0.1875, 0.25)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.4765625, 0.1796875)
    - reference nearest()  = (0.7734375, 0.7890625)
    - student   distanceSquaredTo() = 0.6759033203125
    - reference distanceSquaredTo() = 0.1680908203125
    - sequence of operations was:
           st.insert(0.4765625, 0.1796875)
           st.range([0.40625, 0.5390625] x [0.0703125, 0.875])  ==>  N 
           st.size()  ==>  1
           st.insert(0.671875, 0.0)
           st.insert(0.28125, 0.1171875)
           st.contains((0.1328125, 0.0234375))  ==>  false
           st.nearest((0.59375, 0.75))   ==>  (0.4765625, 0.1796875)
           st.range([0.359375, 0.5078125] x [0.5625, 0.671875])  ==>  empty
           st.nearest((0.390625, 0.75))   ==>  (0.4765625, 0.1796875)
           st.insert(0.34375, 0.078125)
           st.contains((0.7109375, 0.7578125))  ==>  false
           st.nearest((0.90625, 0.1640625))   ==>  (0.671875, 0.0)
           st.range([0.4453125, 0.5234375] x [0.4375, 0.5859375])  ==>  empty
           st.nearest((0.484375, 0.0703125))   ==>  (0.4765625, 0.1796875)
           st.range([0.3515625, 0.9375] x [0.2109375, 0.78125])  ==>  empty
           st.range([0.5234375, 0.5859375] x [0.6328125, 0.7734375])  ==>  empty
           st.nearest((0.421875, 0.6875))   ==>  (0.4765625, 0.1796875)
           st.insert(0.7734375, 0.7890625)
           st.contains((0.078125, 0.203125))  ==>  false
           st.nearest((0.421875, 1.0))   ==>  (0.4765625, 0.1796875)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 53 of 20000
    - student   nearest()  = (0.951171875, 0.63671875)
    - reference nearest()  = (0.98828125, 0.615234375)
    - student   distanceSquaredTo() = 0.013508796691895
    - reference distanceSquaredTo() = 0.010499000549316

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 17 of 20000
    - student   nearest()  = (0.9281005859375, 0.2838134765625)
    - reference nearest()  = (0.8245849609375, 0.435791015625)
    - student   distanceSquaredTo() = 0.07553294301033
    - reference distanceSquaredTo() = 0.010054424405098
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(0.9281005859375, 0.2838134765625)
           st.range([0.2625732421875, 0.435791015625] x [0.3472900390625, 0.3958740234375])  ==>  empty
           st.range([0.626220703125, 0.8170166015625] x [0.304931640625, 0.7100830078125])  ==>  empty
           st.nearest((0.567138671875, 0.9962158203125))   ==>  (0.9281005859375, 0.2838134765625)
           st.contains((0.73779296875, 0.78564453125))  ==>  false
           st.insert(0.2135009765625, 0.4390869140625)
           st.insert(0.988525390625, 0.731201171875)
           st.contains((0.51806640625, 0.3280029296875))  ==>  false
           st.nearest((0.4793701171875, 0.5244140625))   ==>  (0.2135009765625, 0.4390869140625)
           st.insert(0.8245849609375, 0.435791015625)
           st.range([0.1265869140625, 0.156982421875] x [0.3687744140625, 0.4481201171875])  ==>  empty
           st.insert(0.6434326171875, 0.430419921875)
           st.insert(0.1220703125, 0.39501953125)
           st.contains((0.869140625, 0.236083984375))  ==>  false
           st.nearest((0.733642578125, 0.47802734375))   ==>  (0.9281005859375, 0.2838134765625)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 47 of 20000
    - student   nearest()  = (0.6104888916015625, 0.3597564697265625)
    - reference nearest()  = (0.3614044189453125, 0.459564208984375)
    - student   distanceSquaredTo() = 0.263826468959451
    - reference distanceSquaredTo() = 0.084659476997331

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 33 of 20000
    - student   nearest()  = (0.0, 0.0)
    - reference nearest()  = (0.0, 1.0)
    - student   distanceSquaredTo() = 1
    - reference distanceSquaredTo() = 0

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 26 of 20000
    - student   nearest()  = (0.0, 0.625)
    - reference nearest()  = (0.3125, 0.625)
    - student   distanceSquaredTo() = 0.23828125
    - reference distanceSquaredTo() = 0.1015625
    - sequence of operations was:
           st.size()  ==>  0
           st.size()  ==>  0
           st.insert(0.0, 0.625)
           st.insert(0.875, 0.0)
           st.contains((0.0, 0.5625))  ==>  false
           st.nearest((0.4375, 0.125))   ==>  (0.875, 0.0)
           st.insert(1.0, 0.5625)
           st.nearest((0.25, 0.3125))   ==>  (0.0, 0.625)
           st.range([0.375, 1.0] x [0.0, 0.8125])  ==>  Q J 
           st.nearest((0.1875, 0.9375))   ==>  (0.0, 0.625)
           st.contains((0.9375, 0.0))  ==>  false
           st.insert(0.875, 0.75)
           st.contains((0.0, 0.1875))  ==>  false
           st.contains((0.8125, 0.0))  ==>  false
           st.nearest((0.4375, 0.625))   ==>  (0.0, 0.625)
           st.range([0.0, 0.6875] x [0.6875, 0.75])  ==>  empty
           st.range([0.1875, 1.0] x [0.6875, 1.0])  ==>  C 
           st.insert(0.3125, 0.5)
           st.range([0.0, 0.1875] x [0.0625, 0.3125])  ==>  empty
           st.nearest((0.0, 0.5))   ==>  (0.0, 0.625)
           st.nearest((0.5625, 0.875))   ==>  (0.875, 0.75)
           st.contains((0.0625, 0.625))  ==>  false
           st.insert(0.3125, 0.625)
           st.contains((0.375, 0.25))  ==>  false
           st.nearest((1.0, 0.0625))   ==>  (0.875, 0.0)
           st.nearest((0.375, 0.9375))   ==>  (0.0, 0.625)

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.5546875, 0.0234375)
    - reference nearest()  = (0.625, 0.234375)
    - student   distanceSquaredTo() = 0.239501953125
    - reference distanceSquaredTo() = 0.1109619140625
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.9921875, 0.765625)
           st.size()  ==>  1
           st.range([0.7265625, 0.8671875] x [0.5703125, 0.84375])  ==>  empty
           st.isEmpty()  ==>  false
           st.insert(0.796875, 0.9140625)
           st.range([0.6953125, 0.96875] x [0.4921875, 0.953125])  ==>  J 
           st.insert(0.5546875, 0.0234375)
           st.range([0.84375, 0.9140625] x [0.4296875, 0.8203125])  ==>  empty
           st.contains((0.6875, 0.109375))  ==>  false
           st.nearest((0.5, 0.046875))   ==>  (0.5546875, 0.0234375)
           st.insert(0.625, 0.234375)
           st.isEmpty()  ==>  false
           st.contains((0.1484375, 0.3046875))  ==>  false
           st.contains((0.6875, 0.7109375))  ==>  false
           st.nearest((0.09375, 0.890625))   ==>  (0.796875, 0.9140625)
           st.range([0.3671875, 0.953125] x [0.0078125, 0.375])  ==>  H W 
           st.contains((0.3828125, 0.4296875))  ==>  false
           st.nearest((0.3671875, 1.0))   ==>  (0.796875, 0.9140625)
           st.nearest((0.4140625, 0.4921875))   ==>  (0.5546875, 0.0234375)

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 24 of 20000
    - student   nearest()  = (0.2373046875, 0.7685546875)
    - reference nearest()  = (0.2607421875, 0.421875)
    - student   distanceSquaredTo() = 0.333490371704102
    - reference distanceSquaredTo() = 0.082928657531738
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.3603515625, 0.833984375)
           st.insert(0.84375, 0.1328125)
           st.insert(0.0283203125, 0.8583984375)
           st.nearest((0.8251953125, 0.630859375))   ==>  (0.84375, 0.1328125)
           st.insert(0.8134765625, 0.96484375)
           st.range([0.4423828125, 0.6171875] x [0.3125, 0.5625])  ==>  empty
           st.insert(0.2373046875, 0.7685546875)
           st.contains((0.5458984375, 0.3466796875))  ==>  false
           st.range([0.4560546875, 0.9716796875] x [0.052734375, 0.8486328125])  ==>  K 
           st.nearest((0.8818359375, 0.9609375))   ==>  (0.8134765625, 0.96484375)
           st.insert(0.9384765625, 0.796875)
           st.nearest((0.6982421875, 0.484375))   ==>  (0.84375, 0.1328125)
           st.contains((0.3251953125, 0.1982421875))  ==>  false
           st.insert(0.2607421875, 0.421875)
           st.range([0.775390625, 0.783203125] x [0.2666015625, 0.43359375])  ==>  empty
           st.nearest((0.2548828125, 0.662109375))   ==>  (0.2373046875, 0.7685546875)
           st.insert(0.6044921875, 0.216796875)
           st.range([0.2734375, 0.7841796875] x [0.439453125, 0.5693359375])  ==>  empty
           st.insert(0.5478515625, 0.869140625)
           st.insert(0.9306640625, 0.0224609375)
           st.insert(0.044921875, 0.9453125)
           st.contains((0.302734375, 0.3134765625))  ==>  false
           st.nearest((0.0546875, 0.220703125))   ==>  (0.2373046875, 0.7685546875)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 24 of 20000
    - student   nearest()  = (0.60791015625, 0.539306640625)
    - reference nearest()  = (0.2308349609375, 0.9017333984375)
    - student   distanceSquaredTo() = 0.089299932122231
    - reference distanceSquaredTo() = 0.074621573090553
    - sequence of operations was:
           st.insert(0.3245849609375, 0.1552734375)
           st.nearest((0.8424072265625, 0.0362548828125))   ==>  (0.3245849609375, 0.1552734375)
           st.contains((0.2423095703125, 0.537353515625))  ==>  false
           st.range([0.0953369140625, 0.5997314453125] x [0.671142578125, 0.92724609375])  ==>  empty
           st.insert(0.119384765625, 0.3797607421875)
           st.range([0.671875, 0.804931640625] x [0.501220703125, 0.89892578125])  ==>  empty
           st.insert(0.8643798828125, 0.4573974609375)
           st.insert(0.8240966796875, 0.507568359375)
           st.range([0.143798828125, 0.6015625] x [0.3245849609375, 0.4412841796875])  ==>  empty
           st.nearest((0.046630859375, 0.4100341796875))   ==>  (0.119384765625, 0.3797607421875)
           st.insert(0.013427734375, 0.5479736328125)
           st.nearest((0.8779296875, 0.1448974609375))   ==>  (0.8643798828125, 0.4573974609375)
           st.insert(0.6658935546875, 0.1484375)
           st.range([0.0894775390625, 0.1624755859375] x [0.4140625, 0.9864501953125])  ==>  empty
           st.insert(0.378173828125, 0.2459716796875)
           st.insert(0.2308349609375, 0.9017333984375)
           st.nearest((0.3055419921875, 0.82958984375))   ==>  (0.2308349609375, 0.9017333984375)
           st.range([0.09814453125, 0.3984375] x [0.2491455078125, 0.9991455078125])  ==>  H P 
           st.range([0.3353271484375, 0.6175537109375] x [0.0235595703125, 0.18798828125])  ==>  empty
           st.insert(0.60791015625, 0.539306640625)
           st.size()  ==>  9
           st.contains((0.0103759765625, 0.308349609375))  ==>  false
           st.contains((0.9969482421875, 0.168212890625))  ==>  false
           st.nearest((0.3291015625, 0.6468505859375))   ==>  (0.60791015625, 0.539306640625)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 18 of 20000
    - student   nearest()  = (0.2400360107421875, 0.6092529296875)
    - reference nearest()  = (0.0705718994140625, 0.66656494140625)
    - student   distanceSquaredTo() = 0.010024537332356
    - reference distanceSquaredTo() = 0.006363704800606
    - sequence of operations was:
           st.insert(0.079071044921875, 0.1255340576171875)
           st.size()  ==>  1
           st.contains((0.480438232421875, 0.995635986328125))  ==>  false
           st.insert(0.0963287353515625, 0.8669586181640625)
           st.range([0.1751556396484375, 0.4123687744140625] x [0.1191558837890625, 0.129547119140625])  ==>  empty
           st.contains((0.9972686767578125, 0.5863800048828125))  ==>  false
           st.nearest((0.6414794921875, 0.12030029296875))   ==>  (0.079071044921875, 0.1255340576171875)
           st.insert(0.5695343017578125, 0.8314208984375)
           st.contains((0.533721923828125, 0.5657196044921875))  ==>  false
           st.range([0.2018585205078125, 0.9001922607421875] x [0.165802001953125, 0.869781494140625])  ==>  M 
           st.insert(0.2400360107421875, 0.6092529296875)
           st.insert(0.7303314208984375, 0.5077667236328125)
           st.insert(0.5920562744140625, 0.5546875)
           st.contains((0.479522705078125, 0.5958251953125))  ==>  false
           st.contains((0.1288604736328125, 0.2916412353515625))  ==>  false
           st.insert(0.0705718994140625, 0.66656494140625)
           st.range([0.6406707763671875, 0.887908935546875] x [0.1787261962890625, 0.9429779052734375])  ==>  P 
           st.nearest((0.1425933837890625, 0.63226318359375))   ==>  (0.2400360107421875, 0.6092529296875)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 18/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          248                264
=> passed        2          344                360
=> passed        5          632                648
=> passed       10         1112               1128
=> passed       25         2552               2568
=> passed      100         9752               9768
=> passed      400        38552              38568
=> passed      800        76952              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 152.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          144                160
=> passed        2          224                288
=> passed        5          464                672
=> passed       10          864               1312
=> passed       25         2064               3232
=> passed      100         8064              12832
=> passed      400        32064              51232
=> passed      800        64064             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 80.00 n + 64.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1186748         
=> passed   320000    1372689         
=> passed   640000    1316324         
=> passed  1280000     979395         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     808702         
=> passed   320000     692858         
=> passed   640000     655566         
=> passed  1280000     613242         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4022         
=> passed    20000       1488         
=> passed    40000        687         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4939         
=> passed    20000       1825         
=> passed    40000        776         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1996444               0.0              22.1              21.1              21.6         
=> passed   320000    1973247               0.0              22.5              21.5              22.0         
=> passed   640000    1310622               0.0              24.0              23.0              23.5         
=> passed  1280000    1049204               0.0              26.1              25.1              25.6         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1174295              18.5              17.5              18.0         
=> passed    20000    1125629              19.7              18.7              19.2         
=> passed    40000    1134772              21.8              20.8              21.3         
=> passed    80000    1036255              22.0              21.0              21.5         
=> passed   160000     795982              23.2              22.2              22.7         
=> passed   320000     615784              25.0              24.0              24.5         
=> passed   640000     530289              25.7              24.7              25.2         
=> passed  1280000     555359              27.2              26.2              26.7         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     334730               0.0               0.0              56.5              55.2         
=> passed    20000     301334               0.0               0.0              58.6              58.2         
=> passed    40000     193380               0.0               0.0              71.9              70.6         
=> passed    80000     288512               0.0               0.0              74.3              73.1         
=> passed   160000     319898               0.0               0.0              77.1              77.0         
=> passed   320000     258357               0.0               0.0              73.7              72.8         
=> passed   640000     192656               0.0               0.0              78.9              78.7         
=> passed  1280000     181412               0.0               0.0              86.8              85.0         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------

    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point2D exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> 0/8 tests passed



Total: 20/28 tests passed!


================================================================