See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 144 warnings)

Correctness:  26/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 80.76%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.7K Jul 29 03:56 KdTree.java
3.9K Jul 29 03:56 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[lines 200-205]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'TSet$inOrderIterator' be refactored into a static nested class?  At KdTree.java:[lines 189-210]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:9: The private instance (or static) variable 'tree' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:143: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
KdTree.java:210: Use the 'isEmpty()' method instead of comparing 'size()' to '0'. [UseCollectionIsEmpty]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:1:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] KdTree.java:8:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:27:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:31:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:37:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:46:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:52:6: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:54:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:62:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:66:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:77:10: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:80:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:80:41: '+=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:141:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:141:39: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:141:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:143:5: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:154:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:166:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:175:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:182:33: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:182:34: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:182:51: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:182:52: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:189:19: The class 'inOrderIterator' must start with an uppercase letter and use CamelCase. [TypeName]
[WARN] KdTree.java:189:62: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:189:63: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:194:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:202:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:203:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:218:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:219:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:219:15: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:223:51: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:225:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:235:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:235:31: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:236:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:240:17: 'if' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 142 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:141:12: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:189:39: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 13 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.289, 0.459)
    - student   nearest()           = (0.5, 0.4)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0.048002
    - reference distanceSquaredTo() = 0.033202

  * input10.txt
    - failed on trial 4 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.455, 0.878)
    - student   nearest()           = (0.785, 0.725)
    - reference nearest()           = (0.32, 0.708)
    - student   distanceSquaredTo() = 0.132309
    - reference distanceSquaredTo() = 0.047125

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 20 of 10000
    - sequence of points inserted: 
      A  0.5625 1.0
      B  0.875 0.8125
      C  0.125 0.3125
      D  1.0 0.9375
      E  0.5 0.125
      F  0.4375 0.875
      G  0.3125 0.1875
      H  0.625 0.375
      I  0.0 0.5625
      J  0.25 0.0
    - query point                   = (0.8125, 0.0625)
    - student   nearest()           = (0.625, 0.375)
    - reference nearest()           = (0.5, 0.125)
    - student   distanceSquaredTo() = 0.1328125
    - reference distanceSquaredTo() = 0.1015625

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 8 of 10000
    - sequence of points inserted: 
      A  0.09375 0.25
      B  0.1875 0.28125
      C  0.90625 0.0625
      D  0.25 0.65625
      E  0.875 0.46875
      F  0.96875 0.34375
      G  0.65625 0.21875
      H  0.0625 0.6875
      I  0.375 0.71875
      J  0.28125 0.875
      K  0.9375 0.84375
      L  0.71875 0.625
      M  0.75 1.0
      N  0.5 0.53125
      O  0.15625 0.9375
      P  0.625 0.40625
      Q  0.8125 0.4375
      R  0.46875 0.375
      S  0.53125 0.5625
      T  0.40625 0.75
    - query point                   = (0.59375, 0.5)
    - student   nearest()           = (0.5, 0.53125)
    - reference nearest()           = (0.53125, 0.5625)
    - student   distanceSquaredTo() = 0.009765625
    - reference distanceSquaredTo() = 0.0078125

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 3 of 10000
    - query point                   = (0.875, 0.71875)
    - student   nearest()           = (0.71875, 0.796875)
    - reference nearest()           = (0.828125, 0.859375)
    - student   distanceSquaredTo() = 0.030517578125
    - reference distanceSquaredTo() = 0.02197265625

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.022430419921875, 0.594207763671875)
    - student   nearest()           = (0.0271759033203125, 0.580291748046875)
    - reference nearest()           = (0.0296630859375, 0.5950927734375)
    - student   distanceSquaredTo() = 0.00021617510356
    - reference distanceSquaredTo() = 0.000053094699979

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 8 of 10000
    - sequence of points inserted: 
      A  0.75 0.75
      B  0.75 0.0
      C  0.75 1.0
      D  0.25 0.25
      E  0.0 0.75
      F  1.0 1.0
      G  1.0 0.75
      H  0.5 0.0
      I  0.25 0.75
      J  0.0 0.25
    - query point                   = (0.0, 0.0)
    - student   nearest()           = (0.25, 0.25)
    - reference nearest()           = (0.0, 0.25)
    - student   distanceSquaredTo() = 0.125
    - reference distanceSquaredTo() = 0.0625

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 7 of 10000
    - sequence of points inserted: 
      A  0.5 0.625
      B  0.25 0.125
      C  0.25 0.75
      D  0.75 0.0
      E  0.375 0.375
      F  0.75 0.75
      G  0.75 0.625
      H  0.375 0.125
      I  0.625 0.75
      J  1.0 0.125
      K  1.0 0.25
      L  0.875 0.75
      M  0.5 0.75
      N  0.375 0.875
      O  0.125 0.75
    - query point                   = (1.0, 0.375)
    - student   nearest()           = (1.0, 0.125)
    - reference nearest()           = (1.0, 0.25)
    - student   distanceSquaredTo() = 0.0625
    - reference distanceSquaredTo() = 0.015625

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 5 of 10000
    - sequence of points inserted: 
      A  1.0 0.5625
      B  0.3125 0.625
      C  0.8125 0.1875
      D  0.875 0.75
      E  0.5625 0.75
      F  0.4375 1.0
      G  0.75 0.625
      H  0.75 0.4375
      I  0.375 0.6875
      J  0.4375 0.375
      K  1.0 1.0
      L  0.8125 0.3125
      M  0.0625 0.0
      N  0.9375 0.1875
      O  0.25 0.5625
      P  0.625 0.8125
      Q  0.5625 0.4375
      R  0.5 0.5625
      S  0.375 0.5625
      T  0.6875 1.0
    - query point                   = (0.25, 0.8125)
    - student   nearest()           = (0.3125, 0.625)
    - reference nearest()           = (0.375, 0.6875)
    - student   distanceSquaredTo() = 0.0390625
    - reference distanceSquaredTo() = 0.03125

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 6 of 10000
    - query point                   = (0.0625, 0.78125)
    - student   nearest()           = (0.09375, 0.9375)
    - reference nearest()           = (0.0625, 0.75)
    - student   distanceSquaredTo() = 0.025390625
    - reference distanceSquaredTo() = 0.0009765625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 3 of 10000
    - query point                   = (0.76336669921875, 0.881256103515625)
    - student   nearest()           = (0.7538299560546875, 0.882110595703125)
    - reference nearest()           = (0.760101318359375, 0.884002685546875)
    - student   distanceSquaredTo() = 0.000091679627076
    - reference distanceSquaredTo() = 0.000018206425011

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 3 of 10000
    - query point                   = (0.0625, 0.75)
    - student   nearest()           = (0.0, 0.75)
    - reference nearest()           = (0.0625, 0.75)
    - student   distanceSquaredTo() = 0.00390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 4 of 10000
    - query point                   = (0.8125, 0.8203125)
    - student   nearest()           = (0.8046875, 0.828125)
    - reference nearest()           = (0.8125, 0.8203125)
    - student   distanceSquaredTo() = 0.0001220703125
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 7 of 10000
    - query point                   = (0.9287109375, 0.310546875)
    - student   nearest()           = (0.943359375, 0.322265625)
    - reference nearest()           = (0.919921875, 0.3046875)
    - student   distanceSquaredTo() = 0.000351905822754
    - reference distanceSquaredTo() = 0.00011157989502

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.13, 0.97)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - failed on trial 2 of 1000

  * input10.txt
    - student   nearest() = (0.417, 0.362)
    - reference nearest() = (0.417, 0.362)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.43, 0.39)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J C D 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.625, 0.625)
    - reference nearest() = (0.625, 0.625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (1.0, 0.875)
    - sequence of points inserted: 
      A  0.5 0.25
      B  0.875 0.0
      C  0.25 0.5
      D  0.625 0.625
      E  0.0 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - failed on trial 7 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.5, 0.875)
    - reference nearest() = (0.5, 0.875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.3125, 1.0)
    - sequence of points inserted: 
      A  0.125 0.25
      B  0.75 0.625
      C  0.5625 0.5
      D  0.0625 0.3125
      E  0.9375 0.9375
      F  0.25 0.0
      G  0.1875 0.375
      H  0.4375 0.4375
      I  0.5 0.875
      J  0.625 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E I C F G H D 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E I J D 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.0, 0.625)
    - reference nearest() = (0.0, 0.625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.03125, 0.75)
    - sequence of points inserted: 
      A  0.375 0.59375
      B  0.09375 0.15625
      C  0.5625 0.03125
      D  0.0 0.625
      E  0.90625 1.0
      F  0.3125 0.25
      G  0.4375 0.65625
      H  0.6875 0.78125
      I  0.125 0.21875
      J  0.71875 0.46875
      K  0.78125 0.09375
      L  0.96875 0.0
      M  0.625 0.125
      N  0.59375 0.71875
      O  0.21875 0.40625
      P  0.28125 0.8125
      Q  0.9375 0.5
      R  0.84375 0.0625
      S  0.25 0.375
      T  0.5 0.96875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D F O I 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D F O 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.203125, 0.90625)
    - reference nearest() = (0.203125, 0.90625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 13
    - number of reference entries = 10
    - entry 3 of the two sequences are not equal
    - student   entry 3 = (0.09375, 0.0625)
    - reference entry 3 = (0.96875, 0.671875)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.5, 0.328125)
    - reference nearest() = (0.5, 0.328125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 17
    - number of reference entries = 16
    - entry 11 of the two sequences are not equal
    - student   entry 11 = (0.625, 0.140625)
    - reference entry 11 = (0.2890625, 0.265625)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.95849609375, 0.19384765625)
    - reference nearest() = (0.9716796875, 0.15478515625)
    - student   distanceSquaredTo() = 0.00145435333252
    - reference distanceSquaredTo() = 0.000127077102661
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 228
    - number of reference entries = 22
    - entry 8 of the two sequences are not equal
    - student   entry 8 = (0.58447265625, 0.35888671875)
    - reference entry 8 = (0.966796875, 0.0751953125)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.53125, 0.90625)
    - reference nearest()  = (0.265625, 0.734375)
    - student   distanceSquaredTo() = 0.178955078125
    - reference distanceSquaredTo() = 0.150634765625
    - sequence of operations was:
           st.insert(0.53125, 0.90625)
           st.insert(0.265625, 0.734375)
           st.nearest((0.1015625, 0.453125))   ==>  (0.265625, 0.734375)
           st.nearest((0.4140625, 0.2734375))   ==>  (0.265625, 0.734375)
           st.size()  ==>  2
           st.nearest((0.5625, 0.484375))   ==>  (0.53125, 0.90625)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 90 of 20000
    - student   nearest()  = (0.583984375, 0.912109375)
    - reference nearest()  = (0.0439453125, 0.7568359375)
    - student   distanceSquaredTo() = 0.214451789855957
    - reference distanceSquaredTo() = 0.053570747375488

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 149 of 20000
    - student   nearest()  = (0.025634765625, 0.0987548828125)
    - reference nearest()  = (0.0479736328125, 0.262939453125)
    - student   distanceSquaredTo() = 0.0193060785532
    - reference distanceSquaredTo() = 0.002974584698677

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 22 of 20000
    - student   nearest()  = (0.52783203125, 0.975738525390625)
    - reference nearest()  = (0.1072845458984375, 0.7050933837890625)
    - student   distanceSquaredTo() = 0.20520948455669
    - reference distanceSquaredTo() = 0.152782194549218
    - sequence of operations was:
           st.insert(0.2332916259765625, 0.944915771484375)
           st.contains((0.8016357421875, 0.965606689453125))  ==>  false
           st.range([0.0450592041015625, 0.0719757080078125] x [0.3786163330078125, 0.738250732421875])  ==>  empty
           st.contains((0.927764892578125, 0.745819091796875))  ==>  false
           st.range([0.7518157958984375, 0.8182220458984375] x [0.743011474609375, 0.849029541015625])  ==>  empty
           st.nearest((0.6534271240234375, 0.4308624267578125))   ==>  (0.2332916259765625, 0.944915771484375)
           st.contains((0.595245361328125, 0.70697021484375))  ==>  false
           st.insert(0.52783203125, 0.975738525390625)
           st.contains((0.5726318359375, 0.977203369140625))  ==>  false
           st.range([0.28582763671875, 0.477294921875] x [0.3278350830078125, 0.530517578125])  ==>  empty
           st.size()  ==>  2
           st.range([0.029266357421875, 0.803497314453125] x [0.015625, 0.7124176025390625])  ==>  empty
           st.range([0.4017333984375, 0.7774810791015625] x [0.670928955078125, 0.9046173095703125])  ==>  empty
           st.nearest((0.199676513671875, 0.069183349609375))   ==>  (0.2332916259765625, 0.944915771484375)
           st.range([0.605224609375, 0.726837158203125] x [0.3805084228515625, 0.743011474609375])  ==>  empty
           st.size()  ==>  2
           st.insert(0.1072845458984375, 0.7050933837890625)
           st.isEmpty()  ==>  false
           st.contains((0.373046875, 0.712066650390625))  ==>  false
           st.isEmpty()  ==>  false
           st.range([0.3612060546875, 0.85736083984375] x [0.036407470703125, 0.2571868896484375])  ==>  empty
           st.nearest((0.4559783935546875, 0.528472900390625))   ==>  (0.52783203125, 0.975738525390625)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 110 of 20000
    - student   nearest()  = (0.1875, 0.0)
    - reference nearest()  = (0.375, 0.125)
    - student   distanceSquaredTo() = 0.01953125
    - reference distanceSquaredTo() = 0.0078125

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 69 of 20000
    - student   nearest()  = (0.9609375, 0.9765625)
    - reference nearest()  = (0.7265625, 1.0)
    - student   distanceSquaredTo() = 0.03106689453125
    - reference distanceSquaredTo() = 0.0078125

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 25 of 20000
    - student   nearest()  = (0.3134765625, 0.1279296875)
    - reference nearest()  = (0.0810546875, 0.634765625)
    - student   distanceSquaredTo() = 0.107270240783691
    - reference distanceSquaredTo() = 0.093814849853516
    - sequence of operations was:
           st.insert(0.1015625, 0.1640625)
           st.contains((0.6259765625, 0.9169921875))  ==>  false
           st.insert(0.6044921875, 0.7998046875)
           st.insert(0.0810546875, 0.634765625)
           st.range([0.1171875, 0.2822265625] x [0.1328125, 0.650390625])  ==>  empty
           st.isEmpty()  ==>  false
           st.size()  ==>  3
           st.contains((0.31640625, 0.6171875))  ==>  false
           st.insert(0.3134765625, 0.1279296875)
           st.contains((0.9697265625, 0.8388671875))  ==>  false
           st.contains((0.5361328125, 0.96484375))  ==>  false
           st.range([0.0947265625, 0.7890625] x [0.6015625, 0.6962890625])  ==>  empty
           st.contains((0.638671875, 0.6484375))  ==>  false
           st.range([0.076171875, 0.826171875] x [0.1767578125, 0.1943359375])  ==>  empty
           st.nearest((0.7744140625, 0.5419921875))   ==>  (0.6044921875, 0.7998046875)
           st.range([0.22265625, 0.572265625] x [0.2587890625, 0.640625])  ==>  empty
           st.size()  ==>  4
           st.range([0.509765625, 0.5859375] x [0.08203125, 0.53125])  ==>  empty
           st.contains((0.2958984375, 0.1259765625))  ==>  false
           st.insert(0.859375, 0.263671875)
           st.nearest((0.2333984375, 0.15625))   ==>  (0.3134765625, 0.1279296875)
           st.insert(0.439453125, 0.77734375)
           st.contains((0.01953125, 0.0947265625))  ==>  false
           st.range([0.373046875, 0.9033203125] x [0.7177734375, 0.7841796875])  ==>  L 
           st.nearest((0.3291015625, 0.455078125))   ==>  (0.3134765625, 0.1279296875)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 54 of 20000
    - student   nearest()  = (0.609130859375, 0.2440185546875)
    - reference nearest()  = (0.454833984375, 0.2960205078125)
    - student   distanceSquaredTo() = 0.023900225758553
    - reference distanceSquaredTo() = 0.003624752163887

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   nearest()  = (0.419403076171875, 0.9699554443359375)
    - reference nearest()  = (0.87213134765625, 0.2986602783203125)
    - student   distanceSquaredTo() = 0.217742138775066
    - reference distanceSquaredTo() = 0.137727190041915
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(0.8265228271484375, 0.9697265625)
           st.contains((0.320098876953125, 0.5900115966796875))  ==>  false
           st.contains((0.74395751953125, 0.791473388671875))  ==>  false
           st.range([0.2703399658203125, 0.5294952392578125] x [0.542816162109375, 0.733978271484375])  ==>  empty
           st.isEmpty()  ==>  false
           st.contains((0.9228363037109375, 0.019744873046875))  ==>  false
           st.nearest((0.097198486328125, 0.3836517333984375))   ==>  (0.8265228271484375, 0.9697265625)
           st.range([0.496795654296875, 0.6965789794921875] x [0.3051910400390625, 0.8655853271484375])  ==>  empty
           st.nearest((0.1355133056640625, 0.523529052734375))   ==>  (0.8265228271484375, 0.9697265625)
           st.insert(0.419403076171875, 0.9699554443359375)
           st.range([0.4045867919921875, 0.4409942626953125] x [0.6110992431640625, 0.8871612548828125])  ==>  empty
           st.contains((0.3363800048828125, 0.1828765869140625))  ==>  false
           st.contains((0.178314208984375, 0.609283447265625))  ==>  false
           st.insert(0.87213134765625, 0.2986602783203125)
           st.nearest((0.58489990234375, 0.533660888671875))   ==>  (0.419403076171875, 0.9699554443359375)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 62 of 20000
    - student   nearest()  = (0.8125, 1.0)
    - reference nearest()  = (0.9375, 0.8125)
    - student   distanceSquaredTo() = 0.03515625
    - reference distanceSquaredTo() = 0.015625

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 55 of 20000
    - student   nearest()  = (0.2890625, 0.921875)
    - reference nearest()  = (0.0625, 0.9296875)
    - student   distanceSquaredTo() = 0.05670166015625
    - reference distanceSquaredTo() = 0.02911376953125

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   nearest()  = (0.5205078125, 0.8837890625)
    - reference nearest()  = (0.662109375, 0.369140625)
    - student   distanceSquaredTo() = 0.259584426879883
    - reference distanceSquaredTo() = 0.184059143066406
    - sequence of operations was:
           st.insert(0.5205078125, 0.8837890625)
           st.range([0.6669921875, 0.7216796875] x [0.4541015625, 0.6220703125])  ==>  empty
           st.nearest((0.0185546875, 0.5322265625))   ==>  (0.5205078125, 0.8837890625)
           st.size()  ==>  1
           st.nearest((0.9931640625, 0.1162109375))   ==>  (0.5205078125, 0.8837890625)
           st.nearest((0.1318359375, 0.2109375))   ==>  (0.5205078125, 0.8837890625)
           st.insert(0.68359375, 0.4306640625)
           st.insert(0.763671875, 0.33203125)
           st.contains((0.57421875, 0.568359375))  ==>  false
           st.insert(0.9013671875, 0.9345703125)
           st.nearest((0.9306640625, 0.7216796875))   ==>  (0.9013671875, 0.9345703125)
           st.insert(0.662109375, 0.369140625)
           st.contains((0.73046875, 0.25))  ==>  false
           st.nearest((0.8486328125, 0.408203125))   ==>  (0.763671875, 0.33203125)
           st.contains((0.693359375, 0.572265625))  ==>  false
           st.nearest((0.7998046875, 0.412109375))   ==>  (0.763671875, 0.33203125)
           st.nearest((0.888671875, 0.419921875))   ==>  (0.763671875, 0.33203125)
           st.contains((0.5634765625, 0.0322265625))  ==>  false
           st.nearest((0.2421875, 0.45703125))   ==>  (0.5205078125, 0.8837890625)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 61 of 20000
    - student   nearest()  = (0.333251953125, 0.6751708984375)
    - reference nearest()  = (0.5662841796875, 0.5535888671875)
    - student   distanceSquaredTo() = 0.030818656086922
    - reference distanceSquaredTo() = 0.018657237291336

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 136 of 20000
    - student   nearest()  = (0.91473388671875, 0.49737548828125)
    - reference nearest()  = (0.9570770263671875, 0.5755615234375)
    - student   distanceSquaredTo() = 0.004326356807724
    - reference distanceSquaredTo() = 0.000729624181986

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 18/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          248                264
=> passed        2          344                360
=> passed        5          632                648
=> passed       10         1112               1128
=> passed       25         2552               2568
=> passed      100         9752               9768
=> passed      400        38552              38568
=> passed      800        76952              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 152.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          144                160
=> passed        2          224                288
=> passed        5          464                672
=> passed       10          864               1312
=> passed       25         2064               3232
=> passed      100         8064              12832
=> passed      400        32064              51232
=> passed      800        64064             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 80.00 n + 64.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     771428         
=> passed   320000     695457         
=> passed   640000     721315         
=> passed  1280000     681672         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     638809         
=> passed   320000     580559         
=> passed   640000     479111         
=> passed  1280000     481604         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3710         
=> passed    20000       1336         
=> passed    40000        566         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4867         
=> passed    20000       1433         
=> passed    40000        595         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     915379               0.0              22.1              21.1              21.6         
=> passed   320000     930962               0.0              22.5              21.5              22.0         
=> passed   640000     668003               0.0              24.0              23.0              23.5         
=> passed  1280000     692811               0.0              26.1              25.1              25.6         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1018164              18.5              17.5              18.0         
=> passed    20000    1050390              19.7              18.7              19.2         
=> passed    40000     654814              21.8              20.8              21.3         
=> passed    80000     650646              22.0              21.0              21.5         
=> passed   160000     621583              23.2              22.2              22.7         
=> passed   320000     505276              25.0              24.0              24.5         
=> passed   640000     456215              25.7              24.7              25.2         
=> passed  1280000     337513              27.2              26.2              26.7         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     218441               0.0               0.0              56.5              55.2         
=> passed    20000     384228               0.0               0.0              58.6              58.2         
=> passed    40000     325321               0.0               0.0              71.9              70.6         
=> passed    80000     282406               0.0               0.0              74.3              73.1         
=> passed   160000     273376               0.0               0.0              77.1              77.0         
=> passed   320000     158366               0.0               0.0              73.7              72.8         
=> passed   640000     183634               0.0               0.0              78.9              78.7         
=> passed  1280000     131466               0.0               0.0              86.8              85.0         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------

    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point2D exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> 0/8 tests passed



Total: 20/28 tests passed!


================================================================