See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (4 warnings)
Checkstyle:   FAILED (0 errors, 84 warnings)

Correctness:  4/35 tests passed
Memory:       8/16 tests passed
Timing:       14/42 tests passed

Aggregate score: 28.52%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.7K Jul 28 18:18 KdTree.java
3.4K Jul 28 18:18 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'contains()' but ignores its return value. The method, however, does not produce any effect other than returning a value.  At KdTree.java:[line 205]
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[lines 148-153]
M C UWF_UNWRITTEN_FIELD UwF: The instance (or static) variable 'tree' is never initialized; all reads of it will return the default value (0 or null). Check for errors (should it have been initialized?), or remove if useless.  At KdTree.java:[line 26]
M C UWF_UNWRITTEN_FIELD UwF: The instance (or static) variable 'root' is never initialized; all reads of it will return the default value (0 or null). Check for errors (should it have been initialized?), or remove if useless.  At KdTree.java:[line 143]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'TSet$inOrderIterator' be refactored into a static nested class?  At KdTree.java:[lines 138-158]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 26]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 32]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'root', which appears to be null.  At KdTree.java:[line 128]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'root', which appears to be null.  At KdTree.java:[line 124]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 47]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'root', which appears to be null.  At KdTree.java:[line 131]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 37]
M C NP_UNWRITTEN_FIELD NP: Dereferences the instance (or static) variable 'tree', which appears to be null.  At KdTree.java:[line 60]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:8: The private instance (or static) variable 'size' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:117: All instance (and static) variables must be 'private'. [OnlyPrivateInstanceVariables]
KdTree.java:158: Use the 'isEmpty()' method instead of comparing 'size()' to '0'. [UseCollectionIsEmpty]
KdTree.java:208: The 'if' or 'else' clause appears to serve no purpose because its body is empty. [EmptyIfStmt]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:1:1: Your program defines 3 outer types, but there should be only 1. [OuterTypeNumber]
[WARN] KdTree.java:8:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:26:8: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:37:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:43:6: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:47:9: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:51:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:63:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:66:12: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:79:8: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:79:41: '+=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:115:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:115:39: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:115:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:117:5: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] KdTree.java:131:33: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:131:34: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:131:51: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:131:52: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:138:19: The class 'inOrderIterator' must start with an uppercase letter and use CamelCase. [TypeName]
[WARN] KdTree.java:138:62: '>' is followed by an illegal character. [GenericWhitespace]
[WARN] KdTree.java:138:63: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:150:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:151:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:166:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:167:1: The .java file must have exactly one top-level class. [OneTopLevelClass]
[WARN] KdTree.java:167:15: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:171:51: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:173:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:181:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:182:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:184:13: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:184:14: 'else' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:187:9: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:187:10: 'else' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:187:15: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:188:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:188:43: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:190:13: '}' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 82 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:115:12: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:138:39: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 2
    - query rectangle = [0.0, 0.25] x [0.0, 0.25]
    - sequence of points inserted: 
      A  0.0 0.5
      B  0.0 0.0
    - student   range():  empty
    - reference range():  (0.0, 0.0) 

  * 10 random points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10
    - query rectangle = [0.0, 0.125] x [0.0, 0.125]
    - sequence of points inserted: 
      A  0.5 0.25
      B  0.25 0.25
      C  0.75 0.25
      D  0.0 0.0
      E  0.5 0.75
      F  1.0 0.5
      G  0.0 0.75
      H  0.5 0.5
      I  0.25 1.0
      J  0.25 0.5
    - student   range():  empty
    - reference range():  (0.0, 0.0) 

  * 20 random points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 19
    - query rectangle = [0.0625, 0.1875] x [0.0, 0.0625]
    - sequence of points inserted: 
      A  0.875 0.25
      B  0.5 0.0
      C  0.625 0.75
      D  0.375 0.625
      E  0.625 1.0
      F  0.25 0.875
      G  0.375 0.375
      H  0.5 1.0
      I  0.0 0.625
      J  0.125 0.875
      K  1.0 0.375
      L  0.25 1.0
      M  0.125 0.0
      N  0.5 0.75
      O  0.125 0.5
      P  0.375 1.0
      Q  0.0 1.0
      R  0.625 0.125
      S  0.25 0.875
      T  0.875 1.0
    - student   range():  empty
    - reference range():  (0.125, 0.0) 

  * 100 random points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 85
    - query rectangle = [0.46875, 0.53125] x [0.0, 0.03125]
    - student   range():  empty
    - reference range():  (0.5, 0.0) 

  * 1000 random points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 878
    - query rectangle = [0.0, 0.0078125] x [0.0, 0.0078125]
    - student   range():  empty
    - reference range():  (0.0, 0.0) 

  * 10000 random points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 7530
    - query rectangle = [0.0, 0.00390625] x [0.0, 0.00390625]
    - student   range():  empty
    - reference range():  (0.0, 0.0) 

==> FAILED

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()

    java.util.NoSuchElementException

    java.base/java.util.TreeMap.key(TreeMap.java:1324)
    java.base/java.util.TreeMap.firstKey(TreeMap.java:289)
    java.base/java.util.TreeSet.first(TreeSet.java:394)
    PointSET.nearest(PointSET.java:59)
    TestPointSET.checkNearest(TestPointSET.java:212)
    TestPointSET.test5(TestPointSET.java:707)
    TestPointSET.main(TestPointSET.java:794)

 * range()
==> FAILED

Test 6: call methods with null argument
  * insert()
    - throws wrong exception when calling insert() with a null first argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * contains()
    - throws wrong exception when calling contains() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * range()
    - throws wrong exception when calling range() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * nearest()
    - throws wrong exception when calling nearest() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 11 of 10000
    - rectangle = [0.0, 1.0] x [0.0, 1.0]
    - student   range():  empty
    - reference range():  (0.0, 0.0) 
    - sequence of operations was:
           set.isEmpty()  ==>  true
           set.isEmpty()  ==>  true
           set.isEmpty()  ==>  true
           set.size()     ==>  0
           set.isEmpty()  ==>  true
           set.insert((0.0, 0.0))
           set.nearest((0.0, 0.0))   ==>  (0.0, 0.0)
           set.isEmpty()  ==>  false
           set.nearest((0.0, 1.0))   ==>  (0.0, 0.0)
           set.contains((0.0, 1.0))  ==>  false
           set.range([0.0, 1.0] x [0.0, 1.0])  ==>  empty

  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 29 of 10000
    - rectangle = [0.5625, 0.75] x [0.0, 0.625]
    - student   range():  (0.625, 0.0625) 
    - reference range():  (0.625, 0.0625) (0.75, 0.3125) (0.75, 0.375) 

  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 30 of 10000
    - rectangle = [0.40625, 0.8203125] x [0.2890625, 0.9453125]
    - student   range():  (0.5390625, 0.34375) (0.4921875, 0.3984375) (0.6875, 0.671875) (0.6953125, 0.8671875) 
    - reference range():  (0.5546875, 0.2890625) (0.5390625, 0.34375) (0.4921875, 0.3984375) (0.6875, 0.671875) (0.6953125, 0.8671875) 

  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 86 of 10000
    - rectangle = [0.0625, 0.220703125] x [0.064453125, 0.982421875]
    - student   range():  (0.1123046875, 0.5048828125) (0.08984375, 0.6650390625) (0.109375, 0.8369140625) (0.103515625, 0.96484375) 
    - reference range():  (0.0625, 0.5) (0.1123046875, 0.5048828125) (0.08984375, 0.6650390625) (0.109375, 0.8369140625) (0.103515625, 0.96484375) 

  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 105 of 10000
    - rectangle = [0.626953125, 0.73876953125] x [0.15234375, 0.461669921875]
    - student   range():  empty
    - reference range():  (0.73876953125, 0.3338623046875) 

  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 1312 of 10000
    - rectangle = [0.33673095703125, 0.5510711669921875] x [0.2076568603515625, 0.846954345703125]
    - student   range():  (0.486114501953125, 0.2151947021484375) (0.5004730224609375, 0.2185516357421875) (0.5124053955078125, 0.219696044921875) (0.3395843505859375, 0.2246246337890625) (0.456146240234375, 0.225067138671875) (0.5385284423828125, 0.2262725830078125) (0.386505126953125, 0.253662109375) (0.520751953125, 0.2643280029296875) (0.3863983154296875, 0.27630615234375) (0.451446533203125, 0.281982421875) (0.5369415283203125, 0.2949676513671875) (0.44110107421875, 0.3237152099609375) (0.399993896484375, 0.336517333984375) (0.361663818359375, 0.3522186279296875) (0.43511962890625, 0.352325439453125) (0.4951019287109375, 0.3570556640625) (0.345672607421875, 0.36309814453125) (0.3498992919921875, 0.37255859375) (0.440521240234375, 0.37359619140625) (0.4680633544921875, 0.3962554931640625) (0.5035858154296875, 0.4091644287109375) (0.3675537109375, 0.4160003662109375) (0.4516143798828125, 0.428558349609375) (0.4360504150390625, 0.4451446533203125) (0.47955322265625, 0.4477386474609375) (0.494903564453125, 0.456787109375) ...
    - reference range():  (0.486114501953125, 0.2151947021484375) (0.5004730224609375, 0.2185516357421875) (0.5124053955078125, 0.219696044921875) (0.3395843505859375, 0.2246246337890625) (0.456146240234375, 0.225067138671875) (0.5385284423828125, 0.2262725830078125) (0.386505126953125, 0.253662109375) (0.520751953125, 0.2643280029296875) (0.3863983154296875, 0.27630615234375) (0.451446533203125, 0.281982421875) (0.5369415283203125, 0.2949676513671875) (0.44110107421875, 0.3237152099609375) (0.399993896484375, 0.336517333984375) (0.361663818359375, 0.3522186279296875) (0.43511962890625, 0.352325439453125) (0.4951019287109375, 0.3570556640625) (0.345672607421875, 0.36309814453125) (0.3498992919921875, 0.37255859375) (0.440521240234375, 0.37359619140625) (0.4680633544921875, 0.3962554931640625) (0.5035858154296875, 0.4091644287109375) (0.3675537109375, 0.4160003662109375) (0.4516143798828125, 0.428558349609375) (0.4360504150390625, 0.4451446533203125) (0.47955322265625, 0.4477386474609375) (0.494903564453125, 0.456787109375) ...

==> FAILED

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 4/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1581)
    TestKdTree.main(TestKdTree.java:1929)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1582)
    TestKdTree.main(TestKdTree.java:1929)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1583)
    TestKdTree.main(TestKdTree.java:1929)

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1590)
    TestKdTree.main(TestKdTree.java:1932)

  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1591)
    TestKdTree.main(TestKdTree.java:1932)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1592)
    TestKdTree.main(TestKdTree.java:1932)

  * 50 random non-degenerate points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1593)
    TestKdTree.main(TestKdTree.java:1932)

  * 500 random non-degenerate points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1594)
    TestKdTree.main(TestKdTree.java:1932)

  * 50000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1595)
    TestKdTree.main(TestKdTree.java:1932)

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1602)
    TestKdTree.main(TestKdTree.java:1935)

  * 10 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1603)
    TestKdTree.main(TestKdTree.java:1935)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1604)
    TestKdTree.main(TestKdTree.java:1935)

  * 10000 random distinct points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1605)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1606)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1607)
    TestKdTree.main(TestKdTree.java:1935)

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1614)
    TestKdTree.main(TestKdTree.java:1938)

  * 10 random general points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1615)
    TestKdTree.main(TestKdTree.java:1938)

  * 50 random general points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1616)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1617)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1618)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:187)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1619)
    TestKdTree.main(TestKdTree.java:1938)

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree.contains(KdTree.java:32)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1627)
    TestKdTree.main(TestKdTree.java:1941)

  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1628)
    TestKdTree.main(TestKdTree.java:1941)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1629)
    TestKdTree.main(TestKdTree.java:1941)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:229)
    TestKdTree.test2a(TestKdTree.java:1630)
    TestKdTree.main(TestKdTree.java:1941)

==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1638)
    TestKdTree.main(TestKdTree.java:1944)

  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1639)
    TestKdTree.main(TestKdTree.java:1944)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1640)
    TestKdTree.main(TestKdTree.java:1944)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1641)
    TestKdTree.main(TestKdTree.java:1944)

  * 500 random non-degenerate points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1642)
    TestKdTree.main(TestKdTree.java:1944)

  * 10000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2b(TestKdTree.java:1643)
    TestKdTree.main(TestKdTree.java:1944)

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1651)
    TestKdTree.main(TestKdTree.java:1947)

  * 10 random distinct points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1652)
    TestKdTree.main(TestKdTree.java:1947)

  * 20 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1653)
    TestKdTree.main(TestKdTree.java:1947)

  * 10000 random distinct points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1654)
    TestKdTree.main(TestKdTree.java:1947)

  * 100000 random distinct points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1655)
    TestKdTree.main(TestKdTree.java:1947)

  * 100000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2c(TestKdTree.java:1656)
    TestKdTree.main(TestKdTree.java:1947)

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1664)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1665)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1666)
    TestKdTree.main(TestKdTree.java:1950)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkContains(TestKdTree.java:239)
    TestKdTree.checkContains(TestKdTree.java:223)
    TestKdTree.test2d(TestKdTree.java:1667)
    TestKdTree.main(TestKdTree.java:1950)

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt

    java.lang.NullPointerException

    KdTree.range(KdTree.java:47)
    TestKdTree.checkRange(TestKdTree.java:576)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1675)
    TestKdTree.main(TestKdTree.java:1953)

  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1676)
    TestKdTree.main(TestKdTree.java:1953)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1677)
    TestKdTree.main(TestKdTree.java:1953)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:529)
    TestKdTree.test3a(TestKdTree.java:1678)
    TestKdTree.main(TestKdTree.java:1953)

==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1686)
    TestKdTree.main(TestKdTree.java:1956)

  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1687)
    TestKdTree.main(TestKdTree.java:1956)

  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1688)
    TestKdTree.main(TestKdTree.java:1956)

  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1689)
    TestKdTree.main(TestKdTree.java:1956)

  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1690)
    TestKdTree.main(TestKdTree.java:1956)

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3b(TestKdTree.java:1691)
    TestKdTree.main(TestKdTree.java:1956)

==> FAILED

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1698)
    TestKdTree.main(TestKdTree.java:1959)

  * 10 random distinct points and random rectangles in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1699)
    TestKdTree.main(TestKdTree.java:1959)

  * 20 random distinct points and random rectangles in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1700)
    TestKdTree.main(TestKdTree.java:1959)

  * 100 random distinct points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1701)
    TestKdTree.main(TestKdTree.java:1959)

  * 1000 random distinct points and random rectangles in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1702)
    TestKdTree.main(TestKdTree.java:1959)

  * 10000 random distinct points and random rectangles in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3c(TestKdTree.java:1703)
    TestKdTree.main(TestKdTree.java:1959)

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1711)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1712)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1713)
    TestKdTree.main(TestKdTree.java:1962)

  * 5000 random general points and random rectangles in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRange(TestKdTree.java:544)
    TestKdTree.checkRange(TestKdTree.java:523)
    TestKdTree.test3d(TestKdTree.java:1714)
    TestKdTree.main(TestKdTree.java:1962)

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1722)
    TestKdTree.main(TestKdTree.java:1965)

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1723)
    TestKdTree.main(TestKdTree.java:1965)

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1724)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1725)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1726)
    TestKdTree.main(TestKdTree.java:1965)

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTiny(TestKdTree.java:613)
    TestKdTree.test3e(TestKdTree.java:1727)
    TestKdTree.main(TestKdTree.java:1965)

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:660)
    TestKdTree.test4a(TestKdTree.java:1736)
    TestKdTree.main(TestKdTree.java:1968)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:660)
    TestKdTree.test4a(TestKdTree.java:1737)
    TestKdTree.main(TestKdTree.java:1968)

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1747)
    TestKdTree.main(TestKdTree.java:1971)

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1748)
    TestKdTree.main(TestKdTree.java:1971)

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1749)
    TestKdTree.main(TestKdTree.java:1971)

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1750)
    TestKdTree.main(TestKdTree.java:1971)

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkRangeTraversal(TestKdTree.java:677)
    TestKdTree.checkRangeTraversal(TestKdTree.java:654)
    TestKdTree.test4b(TestKdTree.java:1751)
    TestKdTree.main(TestKdTree.java:1971)

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:60)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1759)
    TestKdTree.main(TestKdTree.java:1974)

  * input1.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1760)
    TestKdTree.main(TestKdTree.java:1974)

  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1761)
    TestKdTree.main(TestKdTree.java:1974)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1762)
    TestKdTree.main(TestKdTree.java:1974)

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1771)
    TestKdTree.main(TestKdTree.java:1977)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1772)
    TestKdTree.main(TestKdTree.java:1977)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1773)
    TestKdTree.main(TestKdTree.java:1977)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1774)
    TestKdTree.main(TestKdTree.java:1977)

  * 10000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1775)
    TestKdTree.main(TestKdTree.java:1977)

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1783)
    TestKdTree.main(TestKdTree.java:1980)

  * 15 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1784)
    TestKdTree.main(TestKdTree.java:1980)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1785)
    TestKdTree.main(TestKdTree.java:1980)

  * 100 random distinct points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1786)
    TestKdTree.main(TestKdTree.java:1980)

  * 10000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1787)
    TestKdTree.main(TestKdTree.java:1980)

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1795)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1796)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearest(TestKdTree.java:298)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1797)
    TestKdTree.main(TestKdTree.java:1983)

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:361)
    TestKdTree.test6a(TestKdTree.java:1806)
    TestKdTree.main(TestKdTree.java:1986)

  * input10.txt

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:361)
    TestKdTree.test6a(TestKdTree.java:1807)
    TestKdTree.main(TestKdTree.java:1986)

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1817)
    TestKdTree.main(TestKdTree.java:1989)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1818)
    TestKdTree.main(TestKdTree.java:1989)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1819)
    TestKdTree.main(TestKdTree.java:1989)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1820)
    TestKdTree.main(TestKdTree.java:1989)

  * 50 random non-degenerate points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1821)
    TestKdTree.main(TestKdTree.java:1989)

  * 1000 random non-degenerate points in a 2048-by-2048 grid

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNearestTraversal(TestKdTree.java:382)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1822)
    TestKdTree.main(TestKdTree.java:1989)

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()

    java.lang.NullPointerException

    KdTree.contains(KdTree.java:32)
    TestKdTree.checkContains(TestKdTree.java:245)
    TestKdTree.checkContains(TestKdTree.java:218)
    TestKdTree.test7(TestKdTree.java:1831)
    TestKdTree.main(TestKdTree.java:1992)

  * nearest()

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:60)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:271)
    TestKdTree.test7(TestKdTree.java:1832)
    TestKdTree.main(TestKdTree.java:1992)

  * range()

    java.lang.NullPointerException

    KdTree.range(KdTree.java:47)
    TestKdTree.checkRange(TestKdTree.java:576)
    TestKdTree.checkRange(TestKdTree.java:518)
    TestKdTree.test7(TestKdTree.java:1833)
    TestKdTree.main(TestKdTree.java:1992)

==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNullInsert(TestKdTree.java:1549)
    TestKdTree.test8(TestKdTree.java:1840)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

  * argument to contains() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNullContains(TestKdTree.java:1444)
    TestKdTree.test8(TestKdTree.java:1841)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

  * argument to range() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNullRange(TestKdTree.java:1479)
    TestKdTree.test8(TestKdTree.java:1842)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

  * argument to nearest() is null

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkNullNearest(TestKdTree.java:1514)
    TestKdTree.test8(TestKdTree.java:1843)
    TestKdTree.main(TestKdTree.java:1995)

    - throws an exception when constructing a KdTree with 2 points

==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1852)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(1.0, 0.0)

  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1853)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.3125, 0.5625)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1854)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.9296875, 0.8984375)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1855)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.6748046875, 0.814453125)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1856)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.610595703125, 0.8924560546875)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9a(TestKdTree.java:1857)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.6591033935546875, 0.874725341796875)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1866)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(1.0, 1.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.insert(KdTree.java:26)
    TestKdTree.checkAll(TestKdTree.java:829)
    TestKdTree.test9b(TestKdTree.java:1867)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.0625, 0.625)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointe

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.